@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authentication
@using HVZ.Models
@using HVZ.Web.Identity.Models
@using HVZ.Web.Shared.Org_Authorization
@inject IOrgRepo OrgRepo
@inject AuthenticationStateProvider AuthenticationStateProvider

@page "/org/{url}"

<h1>@organization?.Name</h1>

<div class="container">
    <CascadingAuthenticationState>
        <AuthorizeView>
            <Authorized>
                <OrgAuth OrgId="@organization?.Id">
                    <OrgAuthorizedAdmin>
                        <h4>Test Admin Content</h4>
                    </OrgAuthorizedAdmin>
                    <OrgAuthorizedModerator>
                        <h4>Test Mod Content</h4>
                        <OrgAuthorizedAdmin>
                            <h5>Nested Admin Content</h5>
                        </OrgAuthorizedAdmin>
                    </OrgAuthorizedModerator>
                </OrgAuth>
            </Authorized>

            <NotAuthorized>
                You need to log in to view this content
            </NotAuthorized>
        </AuthorizeView>
    </CascadingAuthenticationState>
</div>



@code
{
    [Parameter]
    public string? Url { get; set; } = "";

    private HVZ.Models.Organization? organization;
    private bool shouldRender = false;
    protected override async Task OnInitializedAsync()
    {
        @* shouldRender = false; *@
        @* This needs to be synchronous or razor will flip its shit *@
        @* organization = OrgRepo.FindOrgByName("Test Org 1").Result; *@
        organization = await OrgRepo.FindOrgByName("Test Org 1");
        @* shouldRender = true; *@
    }
}



