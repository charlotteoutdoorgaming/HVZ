@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using HVZ.Web.Identity.Models
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<button id="open-modal-btn" class="btn btn-secondary" data-bs-toggle="modal" data-bs-target="#change-password" @onclick="ClearModal">Change password</button>

<EditForm Model="this" OnSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <div class="modal fade" id="change-password" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Change password</h5>
                </div>
                <div class="modal-body">
                    <p>Current password</p>
                    <ul class="text-danger" id="current-password-errors">
                        @foreach(var error in currentPasswordErrors)
                        {
                            <li>@error</li>
                        }
                    </ul>
                    <div class="form-floating mb-3">
                        <input @bind-value="this.CurrentPassword" id="current-password" class="form-control @CurrentPasswordInvalidClass" placeholder="Current password" type="password" />
                        <label for="current-password">Current password</label>
                    </div>
                    <p>New password</p>
                    <ul class="text-danger" id="new-password-errors">
                        @foreach (var error in newPasswordErrors)
                        {
                            <li>@error</li>
                        }
                    </ul>
                    <div class="form-floating mb-3">
                        <input @bind-value="this.NewPassword" id="new-password" class="form-control @NewPasswordInvalidClass" placeholder="New password" type="password" />
                        <label for="new-password">New password</label>
                    </div>
                    <ul class="text-danger" id="confirm-password-errors">
                        @foreach(var error in confirmPasswordErrors)
                        {
                            <li>@error</li>
                        }
                    </ul>
                    <div class="form-floating mb-3">
                        <input @bind-value="this.ConfirmNewPassword" id="confirm-password" class="form-control @ConfirmPasswordInvalidClass" placeholder="Confirm new password" type="password" />
                        <label for="confirm-password">Confirm new password</label>
                    </div>

                    @if(changeSuccess)
                    {
                        <span id="success" class="text-success">Success</span>
                    }
                    <ul class="text-danger">
                        @foreach(var error in changePasswordErrors)
                        {
                            <li>@error</li>
                        }
                    </ul>
                </div>
                <div class="modal-footer">
                    <button type="submit" id="submit-btn" class="btn btn-primary">Submit</button>
                    <a class="btn btn-secondary" data-bs-toggle="modal" data-bs-target="#change-password">Cancel</a>
                </div>
            </div>
        </div>
    </div>
</EditForm>


@code {

    public string? CurrentPassword { get; set; }
    List<string> currentPasswordErrors = new List<string>();
    string? CurrentPasswordInvalidClass => currentPasswordErrors.Count > 0 ? "is-invalid" : null;

    [PasswordValidation]
    public string? NewPassword { get; set; }
    List<string> newPasswordErrors = new List<string>();
    string? NewPasswordInvalidClass => newPasswordErrors.Count > 0 ? "is-invalid" : null;

    public string? ConfirmNewPassword { get; set; }
    List<string> confirmPasswordErrors = new List<string>();
    string? ConfirmPasswordInvalidClass => confirmPasswordErrors.Count > 0 ? "is-invalid" : null;

    List<string> changePasswordErrors = new List<string>();

    bool changeSuccess = false;

    ApplicationUser appUser = null!;

    void ClearErrors()
    {
        currentPasswordErrors = new List<string>();
        newPasswordErrors = new List<string>();
        confirmPasswordErrors = new List<string>();
        changePasswordErrors = new List<string>();
        changeSuccess = false;
    }

    void ClearModal()
    {
        ClearErrors();

        CurrentPassword = null;
        NewPassword = null;
        ConfirmNewPassword = null;
    }

    async Task HandleSubmit(EditContext editContext)
    {
        ClearErrors();

        bool errors = false;

        if (CurrentPassword is null || CurrentPassword == string.Empty) currentPasswordErrors.Add("Required");
        else if (!(await UserManager.CheckPasswordAsync(appUser, CurrentPassword))) currentPasswordErrors.Add("Incorrect password");

        if (NewPassword is null || NewPassword == string.Empty) newPasswordErrors.Add("Required");
        if (!editContext.Validate())
        {
            foreach (var message in editContext.GetValidationMessages())
            {
                newPasswordErrors.Add(message);
            }
        }

        if (ConfirmNewPassword is null || ConfirmNewPassword == string.Empty) confirmPasswordErrors.Add("Required");
        if (ConfirmNewPassword != NewPassword) confirmPasswordErrors.Add("Passwords must match");

        errors = (currentPasswordErrors.Count + newPasswordErrors.Count + confirmPasswordErrors.Count) > 0;

        if (errors) return;

        var result = await UserManager.ChangePasswordAsync(appUser, CurrentPassword!, NewPassword!);

        if (result.Succeeded)
        {
            // Display success notification
            // Email the user
            // Close the modal
            changeSuccess = true;
            return;
        }

        foreach(var error in result.Errors)
        {
            changePasswordErrors.Add($"{error.Code} {error.Description}");
        }

    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userId = authState.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier);

        appUser = await UserManager.GetUserAsync(authState.User) ?? null!;
        if (appUser is null)
        {
            throw new ArgumentNullException("Could not find user with associated claim. User must have an authenticated identity.");
        }
    }
}
