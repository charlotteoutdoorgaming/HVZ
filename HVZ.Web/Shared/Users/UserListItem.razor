@using HVZ.Web.Shared.Org_Authorization
@using HVZ.Web.Shared.Ui_Helpers

@inject IOrgRepo OrgRepo
@inject IUserRepo UserRepo
@inject ILogger<UserListItem> Logger
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="card mb-3 text-nowrap" id="@UserId">
    <div class="row no-gutters">
        <div class="col-3">
            <Thumbnail UserId="@UserId" Size=ImageService.ImageSize.SMALL />
        </div>
        <div class="col-8 text-nowrap overflow-hidden ">
            <p class="card-text me-0 pt-0 ml-0 mb-0 d-inline" id="name-@UserId">@user?.FullName
                @if (UserId == OwnerId)
                {
                    <span class="badge bg-warning ml-1" id="owner-badge"><i class="fa-solid fa-crown"></i></span>
                }
            </p>
            <p class="card-text mt-0 ml-0 mb-0" id="email-@UserId">@user?.Email</p>
        </div>
        <div class="col-1 float-end text-center">
            <OrgAuthorizedAdmin>
                <div class="dropdown">
                    <button class="btn" id="user-settings-toggle-@UserId" data-bs-toggle="dropdown">
                        <i class="fa-solid fa-ellipsis-vertical float-end"></i>
                    </button>
                    <ul class="dropdown-menu" id="user-settings-menu-@UserId" aria-labelledby="dropdownMenuButton1">
                        @if (userIsMod)
                        {
                            <li><button class="dropdown-item" id="set-admin-@UserId" @onclick="SetAdmin">Promote to admin</button></li>
                        }
                        @if (userIsAdmin && OwnerId != UserId)
                        {
                            <li><button class="dropdown-item" id="set-mod-@UserId" @onclick="SetMod">Set to moderator</button></li>
                        }
                        @if (OwnerId != UserId)
                        {
                            <li><button class="dropdown-item" id="remove-@UserId" @onclick="RemoveUser">Remove</button></li>
                        }
                    </ul>
                </div>
            </OrgAuthorizedAdmin>
        </div>
    </div>
</div>

@code
{
    [Parameter]
    public string? UserId { get; set; }
    
    [CascadingParameter(Name = "OrgId")]
    public string? OrgId { get; set; }

    [CascadingParameter(Name = "OwnerId")]
    public string? OwnerId { get; set; }

    private User? user;
    private bool shouldRender;
    private bool userIsAdmin;
    private bool userIsMod;

    protected override bool ShouldRender() => shouldRender;

    protected override async Task OnParametersSetAsync()
    {
        if (UserId == null || OrgId == null || OwnerId == null) throw new ArgumentNullException($"UserId, OrgId, and OwnerId cannot be null.\nUserId: {UserId ?? "null"}\nOrgId: {OrgId ?? "null"}\nOwnerId: {OwnerId ?? "null"}");
        
        user = await UserRepo.FindUserById(UserId);
        userIsAdmin = await OrgRepo.IsAdminOfOrg(OrgId, UserId);
        userIsMod = await OrgRepo.IsModOfOrg(OrgId, UserId);
        shouldRender = true;
    }

    async Task SetMod()
    {
        if (UserId == null || OrgId == null) LogCriticalThrowArgumentNullException();

        await OrgRepo.RemoveAdmin(OrgId!, UserId!);
        await OrgRepo.AddModerator(OrgId!, UserId!);
        @* Logging *@
        Organization? org = await OrgRepo.FindOrgById(OrgId!);
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        string? validationError = ValidateState(authState, org);

        if(validationError != null)
        {
            Logger.LogError($"Error setting user to mod: {validationError}");
        }

        string? fullName = authState.User.Claims.FirstOrDefault(c => c.Type == "FullName")?.Value;
        string? callerId = authState.User.Claims.FirstOrDefault(c => c.Type == "DatabaseId")?.Value;
        Logger.LogInformation($"{fullName}.{callerId} has set {user?.FullName}.{user?.Id} to mod in {org?.Name}.{OrgId}");
    }

    async Task SetAdmin()
    {
        if (UserId == null || OrgId == null) LogCriticalThrowArgumentNullException();
        
        await OrgRepo.RemoveModerator(OrgId!, UserId!);
        await OrgRepo.AddAdmin(OrgId!, UserId!);
        @* Logging *@
        Organization? org = await OrgRepo.FindOrgById(OrgId!);
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        string? validationError = ValidateState(authState, org);

        if(validationError != null)
        {
            Logger.LogError($"Error setting user to admin: {validationError}");
        }

        string? fullName = authState.User.Claims.FirstOrDefault(c => c.Type == "FullName")?.Value;
        string? callerId = authState.User.Claims.FirstOrDefault(c => c.Type == "DatabaseId")?.Value;
        Logger.LogInformation($"{fullName}.{callerId} has set {user?.FullName}.{user?.Id} to admin in {org?.Name}.{OrgId}");
    }

    async Task RemoveUser()
    {
        if (UserId == null || OrgId == null) LogCriticalThrowArgumentNullException();

        await OrgRepo.RemoveAdmin(OrgId!, UserId!);
        await OrgRepo.RemoveModerator(OrgId!, UserId!);
        @* Logging *@
        Organization? org = await OrgRepo.FindOrgById(OrgId!);
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        string? validationError = ValidateState(authState, org);

        if(validationError != null)
        {
            Logger.LogError($"Error removing user: {validationError}");
        }

        string? fullName = authState.User.Claims.FirstOrDefault(c => c.Type == "FullName")?.Value;
        string? callerId = authState.User.Claims.FirstOrDefault(c => c.Type == "DatabaseId")?.Value;
        Logger.LogInformation($"{fullName}.{callerId} has removed {user?.FullName}.{user?.Id} from {org?.Name}.{OrgId}");
    }

    /// <summary>
    /// Verify that state is correct
    /// </summary>
    /// <returns>error message if there is an error or null if there are no errors</returns>
    string? ValidateState(AuthenticationState? authState, Organization? org)
    {
        if (user is null)
        {
            return $"User with ID {UserId} is null";
        }

        if (authState is null)
        {
            return $"Could not get auth state Trying to modify {user.FullName} in {org?.Name}";
        }

        if (org is null)
        {
            return $"Org with ID {OrgId} is null";
        }

        return null;
    }

    void LogCriticalThrowArgumentNullException()
    {
        string msg = "Null value escaped OnParametersSetAsync:";

        if (UserId is null) msg += " UserId";
        if (OrgId is null) msg += " OrgId";
        
        Logger.LogCritical(msg);
        throw new ArgumentNullException(msg);
    }
}

