@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IOrgRepo OrgRepo
@inject ILogger<OrgAuth> Logger

@inherits LayoutComponentBase

<CascadingValue Value="@IsAdmin" Name="IsAdmin">
    <CascadingValue Value="@IsMod" Name="IsMod">
        <CascadingValue Value="@OwnerId" Name="OwnerId">
            <CascadingValue Value="@this" Name="OrgAuth">
                <CascadingValue Value="@Org" Name="Org">
                    <CascadingValue Value="@OrgId" Name="OrgId">
                        @ChildContent
                    </CascadingValue>
                </CascadingValue>
            </CascadingValue>
        </CascadingValue>
    </CascadingValue>
</CascadingValue>


@code
{

    [Parameter]
    public string? OrgId { get; set; } = "";

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    private string? userId = "";
    public bool IsAdmin { get; private set; }
    public bool IsMod { get; private set; }
    public string OwnerId { get; set; } = "";
    public Organization Org { get; set; } = null!;
    private bool shouldRender;

    protected override bool ShouldRender() => shouldRender;

    protected override async Task OnParametersSetAsync()
    {
        var authState = AuthenticationStateProvider.GetAuthenticationStateAsync().Result;

        userId = authState.User.Claims.FirstOrDefault(c => c.Type == "DatabaseId")?.Value;
        
        if(OrgId != null && userId != null)
        {
            Org = await OrgRepo.GetOrgById(OrgId);

            IsAdmin = await OrgRepo.IsAdminOfOrg(OrgId, userId);
            IsMod = IsAdmin || await OrgRepo.IsModOfOrg(OrgId, userId);
            OwnerId = Org.OwnerId;

            Logger.LogDebug($"User ID: {userId}; Org ID: {OrgId}\nUser has admin: {IsAdmin}; User has mod: {IsMod}");
            shouldRender = true;
        }
    }

    public void Refresh()
    {
        StateHasChanged();
        InvokeAsync(OnParametersSetAsync);
    }
}
