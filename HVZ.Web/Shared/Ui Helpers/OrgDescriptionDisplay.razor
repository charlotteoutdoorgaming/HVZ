@using System.Text.RegularExpressions

@inject IOrgRepo OrgRepo
@inject IJSRuntime JS

<div class="description @ExpandClass" id="description">
    @((MarkupString)orgDescriptionMarkup)
</div>
<p class="@ExpandDisplayClass text-muted small" @onclick="ToggleExpand">Show @ExpandText</p>


@code {
    [Parameter]
    public Organization? Org { get; set; }

    string orgDescription = "[Charlotte Outdoor Gaming :brands discord:](https://youtube.com/) | [@uncccog :brands twitter:](https://twitter.com) | :person:";
    string orgDescriptionMarkup = string.Empty;

    bool expanded = false;
    bool hasOverflow = false;

    string HeightStyleProperty => expanded ? "auto" : "4.5em";
    string ExpandClass => expanded ? "maximized" : "minimized";

    string ExpandText => expanded ? "less" : "more";
    string ExpandDisplayClass => hasOverflow ? "d-block" : "d-none";

    // URL pattern match https://regex101.com/r/p3s5Fg/2
    // Note: requires http/https protocol - without this requirement, will falsely identify
    //       many non links as links, such as . separated dates, any decimal number, or anything
    //       else that is separated with a . and no space.
    //       Ignores all other protocols such as ws, ftp, sftp, mongodb, etc.
    readonly string linkPattern = @"((\[.{0,}?\])?\()?((http|https)\:\/\/)([\w\d-]+\.)*[\w-]+[\.\:]\w+([\/\?\=\&\#.]?[\w-]+)*\/?\)?";

    // Bold pattern match https://regex101.com/r/FSOjws/2
    readonly string boldPattern = @"(?<=\s|^)(?'t'(\*{2}|_{2})).+(\'t')";

    // Italic pattern match https://regex101.com/r/nWFY3W/1
    readonly string italicPattern = @"(?<=\s|^)(?'t'(\*|_)).+(\'t')";

    // TODO make an actual pattern for this
    readonly string boldItalicPattern = @"(?<=\s|^)(?'t'(\*{3}|_{3})).+(\'t')";

    // Strike pattern match https://regex101.com/r/wLJlQB/1
    readonly string strikethroughPattern = @"(?<=\s|^)(?'t'(~{2})).+(\'t')";

    // Icon pattern match https://regex101.com/r/yyoyQa/2
    readonly string iconPattern = @"(?<=\s|^)(?'t'(:)).+?(\'t')";

    protected override void OnInitialized()
    {
        // Read the string
        // TODO: Set the string to Org.Description

        ProcessDescriptionString();
        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            hasOverflow = await HasOverflow();
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    void ToggleExpand() => expanded = !expanded;

    void ProcessDescriptionString()
    {
        // Escape the description
        string tempMarkup;
        string escapedDescription = EscapeMarkdown(EscapeHtml(orgDescription));
        tempMarkup = Regex.Replace(escapedDescription, linkPattern, new MatchEvaluator(ConvertToLink));
        tempMarkup = Regex.Replace(tempMarkup, iconPattern, new MatchEvaluator(ConvertToIcon));
        tempMarkup = Regex.Replace(tempMarkup, boldItalicPattern, new MatchEvaluator(ConvertToBoldItalic));
        tempMarkup = Regex.Replace(tempMarkup, boldPattern, new MatchEvaluator(ConvertToBold));
        tempMarkup = Regex.Replace(tempMarkup, italicPattern, new MatchEvaluator(ConvertToItalic));
        orgDescriptionMarkup = tempMarkup.Replace("\n", "<br>");

    }

    static string ConvertToLink(Match match)
    {
        // TODO Open up a modal that can then redirect the user to a new page
        string urlText = match.Value;
        Match? linkTextMatch = Regex.Match(urlText, @"^\[.{0,}?\]");
        if (linkTextMatch is not null) urlText = urlText.Replace(linkTextMatch.Value, "");

        urlText = urlText.Replace("(", "").Replace(")", ""); // Remove parens

        string linkText = urlText;
        if (linkTextMatch is not null) linkText = SymmetricRemove(linkTextMatch.Value, 1);

        return string.Format(@"<a href=""{0}"" target=""_blank"">{1}</a>", urlText, linkText);
    }

    static string SymmetricRemove(string input, int count) => input.Remove(input.Length - count).Remove(0, count);

    static string ConvertToBoldItalic(Match match) => $"<b><em>{SymmetricRemove(match.Value, 3)}</em></b>";

    static string ConvertToBold(Match match) => $"<b>{SymmetricRemove(match.Value, 2)}</b>";

    static string ConvertToItalic(Match match) => $"<em>{SymmetricRemove(match.Value, 1)}</em>";

    static string ConvertToStrike(Match match) => $"<s>{SymmetricRemove(match.Value, 2)}</s>";

    static string ConvertToIcon(Match match)
    {
        string content = SymmetricRemove(match.Value, 1);

        string[] contentArray = content.Split(" ");
        string style = (contentArray.Length == 2 ? contentArray[0] : "solid").Trim();
        string iconId = (contentArray.Length == 2 ? contentArray[1] : content).Trim();
        if ((style != "solid" && style != "brands") || contentArray.Length > 2) return match.Value; // Invalid, return initial

        return string.Format(@"<i class=""fa-{0} fa-{1}""></i>", style, iconId);
    }

    string EscapeHtml(string input)
    {
        return input
            .Replace("&", "&amp;")
            .Replace("<", "&lt;")
            .Replace(">", "&gt;");
    }

    string EscapeMarkdown(string input)
    {
        // User specified escapes for markdown caracters
        // Characters are escaped with \ followed by a character
        // \* -> &#42; -rendered as-> *
        return input
            .Replace("\\*", "&#42;") // HTML escape for *
            .Replace("\\_", "&#95;") // HTML escape for _
            .Replace("\\~", "&#126;") // HTML escape for ~
            .Replace("\\:", "&#58;"); // HTML escape for :
    }

    async Task<bool> HasOverflow()
    {
        // Do some js and return the value
        return await JS.InvokeAsync<bool>("hasOverflow", "description");
    }
}
