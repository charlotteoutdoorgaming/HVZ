
@inject ImageService ImageService
@inject IUserRepo UserRepo
@inject IOrgRepo OrgRepo

<img @attributes="@InputAttributes" src="@imgSrc">

@code
{
    [Parameter]
    public string? UserId { get; set; }

    [Parameter]
    public string? OrgId { get; set; }

    [Parameter]
    public ImageService.ImageSize Size { get; set; } = ImageService.ImageSize.MEDIUM;

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? InputAttributes { get; set; }

    string imgSrc = "";

    protected override async Task OnParametersSetAsync()
    {
        if (UserId is null && OrgId is null)
        {
            throw new ArgumentNullException("Thumbnail expects either UserId or OrgId");
        }

        if (UserId is not null && OrgId is not null)
        {
            throw new ArgumentException("Thumbnail can take either UserId or OrgId but not both");
        }

        if (UserId is not null)
        {
            if (ImageService.HasUploadedUserImage(UserId))
            {
                imgSrc = ImageService.GetUserThumbnailResourceLink(UserId, Size);
                return;
            }

            User user = await UserRepo.GetUserById(UserId);
            imgSrc = $"https://ui-avatars.com/api/?name={user.FullName.Replace(" ", "+")}&size={(int)(Size)}";
            return;

        }

        if (OrgId is null) throw new ArgumentException("Invalid state"); // Appease the compiler

        if (ImageService.HasUploadedOrgImage(OrgId))
        {
            imgSrc = ImageService.GetOrgThumbnailResourceLink(OrgId, Size);
            return;
        }

        Organization org = await OrgRepo.GetOrgById(OrgId);

        // Free API to generate user thumbnails
        // https://ui-avatars.com
        imgSrc = $"https://ui-avatars.com/api/?name={org.Name.Replace(" ", "+")}&size={(int)(Size)}";
    }
}

