
@inject ImageService ImageService
@inject IUserRepo UserRepo
@inject IOrgRepo OrgRepo

<img @attributes="@InputAttributes" src="@imgSrc">

@code
{
    [Parameter]
    [EditorRequired]
    public string Id { get; set; } = "";

    [Parameter]
    public ImageService.ImageSize Size { get; set; } = ImageService.ImageSize.MEDIUM;

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? InputAttributes { get; set; }

    string imgSrc = "";

    protected override async Task OnParametersSetAsync()
    {
        if (ImageService.HasUploadedImage(Id))
        {
            imgSrc = ImageService.GetThumbnailResourceLink(Id, Size);
            return;
        }

        var user = await UserRepo.FindUserById(Id);
        var org = await OrgRepo.FindOrgById(Id);

        if (user is null && org is null) return;

        // Get the name of the user or org associated with the ID
        // If user.FullName is null, user is null then this must be an org
        // get the org name
        var name = user?.FullName ?? org?.Name;

        // Free API to generate thumbnails
        // https://ui-avatars.com/
        imgSrc = $"https://ui-avatars.com/api/?name={name?.Replace(" ", "+")}&size={(int)(Size)}";
    }
}

