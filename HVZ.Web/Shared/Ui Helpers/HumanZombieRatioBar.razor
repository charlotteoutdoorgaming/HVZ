@inject ILogger<HumanZombieRatioBar> Logger
@inject IGameRepo GameRepo
@implements IDisposable

<div class="progress px-0 mt-2">
    <div class="progress-bar bg-success" id="human-bar" style="width:@percentHuman%;">
        @(numHumans + numOzs) H
    </div>
    <div class="progress-bar bg-danger" id="zombie-bar" style="width:@percentZombie%;">
        @numZombies Z
    </div>
</div>

@code {
    [Parameter]
    public Game? ActiveGame { get; set; }

    int totalPlayers;
    int numHumans;
    int numZombies;
    int numOzs;
    int percentHuman;
    int percentZombie;

    protected override void OnParametersSet()
    {
        if (ActiveGame is null)
        {
            Logger.LogError("Game cannot be null");
            return;
        }

        GameRepo.PlayerJoinedGame += OnPlayerJoined;
        GameRepo.PlayerRoleChanged += OnPlayerRoleChanged;
        GameRepo.TagLogged += OnTagLogged;

        RefreshCount();
    }

    void OnPlayerJoined(object? sender, PlayerUpdatedEventArgs eventArgs)
    {
        RefreshComponent(eventArgs.game);
    }

    void OnPlayerRoleChanged(object? sender, PlayerRoleChangedEventArgs eventArgs)
    {
        RefreshComponent(eventArgs.game);
    }

    void OnTagLogged(object? sender, TagEventArgs eventArgs)
    {
        RefreshComponent(eventArgs.game);
    }

    void RefreshComponent(Game EventGame)
    {
        if (EventGame.Id == ActiveGame?.Id)
        {
            ActiveGame = EventGame;
            RefreshCount();
            InvokeAsync(StateHasChanged);
        }
    }

    void RefreshCount()
    {
        if (ActiveGame is null) return;
        totalPlayers = ActiveGame.Players.Count;
        numHumans = ActiveGame.Humans.Count;
        numZombies = ActiveGame.Zombies.Count;
        numOzs = ActiveGame.Ozs.Count;
        percentHuman = CalculatePercent(numHumans + numOzs, totalPlayers);
        percentZombie = CalculatePercent(numZombies, totalPlayers);
    }

    /// <summary>
    /// Calculate the ratio of A to B
    /// </summary>
    /// <param name="a"></param>
    /// <param name="b"></param>
    /// <returns>An int between 0 and 100</returns>
    int CalculatePercent(int a, int b)
    {
        // Convert to float
        double da = (double)a;
        double db = (double)b;
        return (int)Math.Round((double)((da / db) * 100), 0);
    }

    public void Dispose()
    {
        GameRepo.PlayerJoinedGame -= OnPlayerJoined;
        GameRepo.PlayerRoleChanged -= OnPlayerRoleChanged;
        GameRepo.TagLogged -= OnTagLogged;
    }
}
