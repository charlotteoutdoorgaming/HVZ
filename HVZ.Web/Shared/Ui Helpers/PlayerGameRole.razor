@inject IGameRepo GameRepo
@inject ILogger<PlayerGameRole> Logger
@implements IDisposable

<span>@playerGameRole</span>

@code {
    [Parameter]
    public string? PlayerId { get; set; }

    [Parameter]
    public string? GameId { get; set; }

    [Parameter]
    public bool ShowOz { get; set; }

    string playerGameRole = "";

    protected override async Task OnParametersSetAsync()
    {
        if (PlayerId is null || GameId is null)
        {
            // Log Error
            return;
        }

        var player = await GameRepo.FindPlayerByGameId(GameId, PlayerId);

        if (player is null)
        {
            // Log Error
            return;
        }

        GameRepo.PlayerRoleChanged += PlayerRoleChanged;

        base.OnParametersSet();
    }

    void PlayerRoleChanged(object? sender, PlayerRoleChangedEventArgs eventArgs)
    {
        if (eventArgs.player.GameId == PlayerId && eventArgs.game.Id == GameId)
        {
            playerGameRole = eventArgs.Role.ToString();
            InvokeAsync(StateHasChanged);
        }
    }

    void PlayerTagged(object? sender, TagEventArgs eventArgs)
    {
        
    }

    public void Dispose()
    {
        GameRepo.PlayerRoleChanged -= PlayerRoleChanged;
    }
}
