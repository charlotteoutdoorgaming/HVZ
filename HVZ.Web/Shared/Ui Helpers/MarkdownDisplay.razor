@using System.Text.RegularExpressions
@using Markdig
@inject IOrgRepo OrgRepo
@inject IJSRuntime JS

<div id="markdown">
    @((MarkupString)textBodyHtml)
</div>

@code {
    [Parameter]
    public string Source { get; set; } = "";

    //string orgDescription = "**Niners vs Zombies**\n:calendar: April 16-22\n [:brands discord: Charlotte Outdoor Gaming](https://discord.gg)\n[:brands instagram: ucccog](https://instagram.com)\n[:brands twitter: uncccog](https://twitter.com)\n\n\n<script>console.log(\"I am hacking this webpage >:)\");</script>";
    string textBodyHtml = string.Empty;

    // Icon pattern match https://regex101.com/r/yyoyQa/3
    readonly string iconPattern = @"(?'t'(:))[\w\-]+?(\s\w+?)?(\'t')";

    protected override void OnInitialized()
    {
        string escapedSource = EscapeHtml(Source);
        textBodyHtml = Markdown.ToHtml(escapedSource, new MarkdownPipelineBuilder().DisableHeadings().UseBootstrap().UseAdvancedExtensions().Build());
        textBodyHtml = Regex.Replace(textBodyHtml, iconPattern, new MatchEvaluator(ConvertToIcon)).Replace("\n", "<br />");
        base.OnInitialized();
    }

    static string SymmetricRemove(string input, int count) => input.Remove(input.Length - count).Remove(0, count);

    static string ConvertToIcon(Match match)
    {
        string content = SymmetricRemove(match.Value, 1);

        string[] contentArray = content.Split(" ");
        string style = (contentArray.Length == 2 ? contentArray[0] : "solid").Trim();
        string iconId = (contentArray.Length == 2 ? contentArray[1] : content).Trim();
        if ((style != "solid" && style != "brands") || contentArray.Length > 2) return match.Value; // Invalid, return initial

        return string.Format(@"<i class=""fa-{0} fa-{1}""></i>", style, iconId);
    }

    string EscapeHtml(string input)
    {
        return input
            .Replace("&", "&amp;")
            //.Replace("#", "&#35;")
            .Replace("<", "&lt;")
            .Replace(">", "&gt;");
    }
}
