@inject IGameRepo GameRepo
@implements IDisposable

<div class="mt-3 reverse-list" style="overflow-y:scroll;max-height:55vh;">
    <div style="align-self:flex-start">
        <Virtualize Items="eventLog" Context="logItem" >
            <div>
                <Thumbnail UserId="@logItem.UserId" Size="ImageService.ImageSize.SMALL" style="height:32px;" />
            </div>
            <div>
                @logItem
            </div>
        </Virtualize>
    </div>
</div>

@code {
    [Parameter]
    public Game ActiveGame { get; set; } = null!;

    List<GameEventLog> eventLog = new List<GameEventLog>();

    protected override void OnParametersSet()
    {
        eventLog = ActiveGame.EventLog;

        GameRepo.PlayerJoinedGame += PlayerUpdatedEvent;
        GameRepo.TagLogged += PlayerTaggedEvent;
        GameRepo.PlayerRoleChanged += PlayerRoleChangedByModEvent;

        // When available:
        //  Game started/paused/resumed/ended
    }

    void PlayerUpdatedEvent(object? sender, PlayerUpdatedEventArgs args)
    {
        if (args.game.Id == ActiveGame.Id)
        {
            eventLog = args.game.EventLog;
        }
    }

    void PlayerTaggedEvent(object? sender, TagEventArgs args)
    {
        if (args.game.Id == ActiveGame.Id)
        {
            eventLog = args.game.EventLog;
        }
    }

    void PlayerRoleChangedByModEvent(object? sender, PlayerRoleChangedEventArgs args)
    {
        if (args.game.Id == ActiveGame.Id)
        {
            eventLog = args.game.EventLog;
        }
    }

    public void Dispose()
    {
        GameRepo.PlayerJoinedGame -= PlayerUpdatedEvent;
        GameRepo.TagLogged -= PlayerTaggedEvent;
        GameRepo.PlayerRoleChanged -= PlayerRoleChangedByModEvent;
    }
}
