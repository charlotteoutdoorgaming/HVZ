@inject IGameRepo GameRepo
@implements IDisposable
@using HVZ.Web.Shared.Game.GameLog

<div class="mt-3 reverse-list w-100" style="overflow-y:scroll;max-height:55vh;">
    <div class="w-100" style="align-self:flex-start">
        <Virtualize Items="eventLog" Context="logItem" >
            <LogItem GameLogItem="@logItem" SeesOzDetails="@SeesOzDetails" />
        </Virtualize>
    </div>
</div>

@code {
    [Parameter]
    public Game ActiveGame { get; set; } = null!;

    [Parameter]
    public Player ActivePlayer { get; set; } = null!;

    [CascadingParameter(Name = "IsMod")]
    public bool IsMod { get; set; }

    List<GameEventLog> eventLog = new List<GameEventLog>();

    bool SeesOzDetails => IsMod || ActivePlayer?.Role == Player.gameRole.Oz;

    protected override void OnParametersSet()
    {
        eventLog = GetEventLog();

        GameRepo.PlayerJoinedGame += PlayerUpdatedEvent;
        GameRepo.TagLogged += PlayerTaggedEvent;
        GameRepo.PlayerRoleChanged += PlayerRoleChangedByModEvent;
        GameRepo.GameActiveStatusChanged += GameStatusChagned;
    }

    List<GameEventLog> GetEventLog()
    {
        if (SeesOzDetails) return ActiveGame.EventLog;

        return ActiveGame.EventLog.Where(
            e => !EventIsOzStatusChange(e) || (EventIsOzStatusChange(e) && SeesOzDetails)
        ).ToList();
    }

    bool EventIsOzStatusChange(GameEventLog e)
    {
        if (e.GameEvent != GameEvent.ActiveStatusChanged) return false;

        return (Player.gameRole)e.AdditionalInfo["role"] is Player.gameRole.Oz;
    }

    void PlayerUpdatedEvent(object? sender, PlayerUpdatedEventArgs args)
    {
        if (args.game.Id == ActiveGame.Id)
        {
            eventLog = args.game.EventLog;
            InvokeAsync(StateHasChanged);
        }
    }

    void PlayerTaggedEvent(object? sender, TagEventArgs args)
    {
        if (args.game.Id == ActiveGame.Id)
        {
            eventLog = args.game.EventLog;
            InvokeAsync(StateHasChanged);
        }
    }

    void PlayerRoleChangedByModEvent(object? sender, PlayerRoleChangedEventArgs args)
    {
        if (args.game.Id == ActiveGame.Id)
        {
            eventLog = args.game.EventLog;
            InvokeAsync(StateHasChanged);
        }
    }

    void GameStatusChagned(object? sender, GameStatusChangedEvent args)
    {
        if (args.game.Id == ActiveGame.Id)
        {
            eventLog = args.game.EventLog;
            InvokeAsync(StateHasChanged);
        }
    }

    public void Dispose()
    {
        GameRepo.PlayerJoinedGame -= PlayerUpdatedEvent;
        GameRepo.TagLogged -= PlayerTaggedEvent;
        GameRepo.PlayerRoleChanged -= PlayerRoleChangedByModEvent;
        GameRepo.GameActiveStatusChanged -= GameStatusChagned;
    }
}
