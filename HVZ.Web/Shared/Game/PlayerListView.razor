@inject IUserRepo UserRepo
@inject IGameRepo GameRepo
@implements IDisposable

<div class="m-auto mt-3" style="max-width:650px;">
    <input @bind="searchQuery" @bind:event="oninput" class="form-control" placeholder="Search players" id="player-search-bar" />

    <div class="mt-3" style="max-height:55vh;overflow-y:scroll;" id="players-list">
        <Virtualize Items="@FilteredPlayers" Context="player">
            <PlayerListItem Player="@player" SeesOz="@SeesOz" ActiveGame="@ActiveGame" UserId="@UserId" />
        </Virtualize>
    </div>
</div>

@code {

    [Parameter]
    public Game? ActiveGame { get; set; }

    [Parameter]
    public string? UserId { get; set; }

    [Parameter]
    public Player? ActivePlayer { get; set; }

    [CascadingParameter(Name = "IsMod")]
    public bool IsMod { get; set; }

    string? searchQuery;

    List<Player> players = new List<Player>();

    List<Player> FilteredPlayers => players.Where(p => MatchFilterQuery(p)).ToList();

    bool SeesOz => IsMod || ActivePlayer?.Role == Player.gameRole.Oz;

    Dictionary<Player, User> playerUserPairs = new Dictionary<Player, User>();

    protected override async Task OnInitializedAsync()
    {
        if (ActiveGame is null)
            throw new ArgumentNullException("ActiveGame cannot be null in PlayerListView");

        players = ActiveGame.Players.ToList();

        foreach(Player player in players)
        {
            var user = await UserRepo.GetUserById(player.UserId);
            playerUserPairs.Add(player, user);
        }

        GameRepo.PlayerJoinedGame += PlayerJoined;
    }

    bool MatchFilterQuery(Player p)
    {

        if (searchQuery is null) return true;

        User user;
        if (playerUserPairs.TryGetValue(p, out user!))
        {
            bool matchesNameQuery = user.FullName.ToLower().Contains(searchQuery.ToLower());
            bool matchesIdQuery = p.GameId == searchQuery && IsMod;
            bool matchesEmailquery = user.Email.ToLower().Contains(searchQuery.ToLower()) && IsMod;

            return matchesNameQuery || matchesIdQuery || matchesEmailquery;
        }

        return false;
    }

    void PlayerJoined(object? sender, PlayerUpdatedEventArgs args)
    {
        if (args.game.Id != ActiveGame?.Id) return;

        Player player = args.player;
        players.Add(player);

        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        GameRepo.PlayerJoinedGame -= PlayerJoined;
    }
}
