@inject IOrgRepo OrgRepo
@inject AuthenticationStateProvider AuthenticationStateProvider

@if (IsAdmin)
{
    <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#start-game-modal">
        <i class="fa-solid fa-plus"></i>New game
    </button>

    <div class="modal fade" id="start-game-modal" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5">New game</h1>
                </div>
                <p class="mb-0 text-danger">@gameError</p>
                <div class="modal-body">
                    <div class="form-floating">
                        <input @bind="gameName" id="game-title" class="form-control" placeholder="Game title" />
                        <label for="game-title">Game title</label>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button class="btn btn-primary" @onclick="NewGame">Create</button>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <h3>There is no active game</h3>
    <p class="text-muted"><em>Come back later...</em></p>
}

@code {
    [CascadingParameter(Name = "IsAdmin")]
    public bool IsAdmin { get; set; }

    [CascadingParameter(Name = "OrgId")]
    public string? OrgId { get; set; }

    string userId = "";
    string? gameName;
    string? gameError;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        userId = authState?.User.Claims.FirstOrDefault(c => c.Type == "DatabaseId")?.Value ?? "";
        if (userId == string.Empty)
        {
            throw new ArgumentException($"UserId is null in StartGame for org {OrgId}");
        }
    }

    async Task NewGame()
    {
        if (gameName is null)
        {
            // Display an error message
            gameError = "Game title cannot be blank";
            return;
        }

        if (OrgId is null)
        {
            // Handle this on initialization
            Console.WriteLine("Creating game");
            return;
        }

        await OrgRepo.CreateGame(gameName, OrgId, userId);
        
    }
}
