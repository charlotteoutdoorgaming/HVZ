@inject IUserRepo UserRepo

<div class="d-flex">
    <div class="flex-grow-0">
        @if (LogItem is not null)
        {
            <Thumbnail UserId="@LogItem.UserId" Size="ImageService.ImageSize.SMALL" style="width:32px;" />
        }
    </div>
    <div class="flex-grow-1">
        <h6 class="mb-0">@MessageHeader</h6>
        <p class="mb-0">@MessageBody</p>
    </div>
</div>

@code
{
    [Parameter]
    public GameEventLog LogItem { get; set; } = null!;

    Game.GameStatus status;

    string MessageHeader => GetMessageHeader();

    string MessageBody => GetMessageBody();

    User? user;

    protected override async Task OnInitializedAsync()
    {
        status = (Game.GameStatus)LogItem.AdditionalInfo["state"];
        user = await UserRepo.GetUserById(LogItem.UserId);
    }

    string GetMessageHeader()
    {
        switch (status)
        {
            case Game.GameStatus.Active:
                return "Game resumed";
            case Game.GameStatus.Paused:
                return "Game paused";
            default:
                return "Unsupported GameEvent";
        }
    }

    string GetMessageBody()
    {
        switch (status)
        {
            case Game.GameStatus.Active:
                return $"{user?.FullName} has resumed the game";
            case Game.GameStatus.Paused:
                return $"{user?.FullName} has paused the game";
            default:
                return string.Empty;
        }
    }
}

