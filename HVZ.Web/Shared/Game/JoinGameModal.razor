@inject IGameRepo GameRepo
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager
@inject ImageService ImageService
@using HVZ.Web.Identity.Models
@using Microsoft.AspNetCore.Identity

<div class="modal fade" @attributes="Attributes" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    Join game
                </h5>
            </div>
            <div class="modal-body">
                @if (errors.Count > 0)
                {
                    <ul class="text-danger">
                        @foreach(var error in errors)
                        {
                            <li>@error</li>
                        }
                    </ul>

                    <p> <a href="/">settings</a></p>
                }
                else
                {
                    <p>You are about to join <em><b>@ActiveGame?.Name</b></em> in <em><b>@Org?.Name</b></em></p>
                    <p class="small"></p>
                }
                
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" data-bs-toggle="modal">Close</button>
                <button class="btn btn-primary @JoinEnabledClass" @onclick="async () => {await Join();}" data-bs-toggle="modal">Join</button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? Attributes { get; set; }

    [CascadingParameter(Name = "Org")]
    public Organization? Org { get; set; }

    [CascadingParameter(Name = "UserId")]
    public string? UserId { get; set; }

    [CascadingParameter]
    public Game? ActiveGame { get; set; }

    List<string> errors = new List<string>();

    string? JoinEnabledClass => errors.Count > 0 ? "disabled" : null;

    protected override async Task OnParametersSetAsync()
    {
        if (Org is null) return;

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var appUser = await UserManager.GetUserAsync(authState.User);

        bool hasProfileImage = ImageService.HasUploadedUserImage(UserId ?? "");

        errors.Clear();
        if (Org.RequireProfilePictureForPlayer && !hasProfileImage)
            errors.Add("You must upload a profile image to join this game");

        if (Org.RequireVerifiedEmailForPlayer && !(appUser?.EmailConfirmed ?? false))
            errors.Add("You must verify your email to join this game");
    }

    async Task Join()
    {
        Console.WriteLine(ActiveGame is not null && UserId is not null);
        if (ActiveGame is not null && UserId is not null)
        {
            await GameRepo.AddPlayer(ActiveGame.Id, UserId);
            Console.WriteLine("Joining game");
        }
        Console.WriteLine("Joining game?");
    }
}
