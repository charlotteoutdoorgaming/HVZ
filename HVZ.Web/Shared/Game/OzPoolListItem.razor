@inject IGameRepo GameRepo
@inject IUserRepo UserRepo

<div class="border border-1 rounded mt-1" data-bs-toggle="modal" data-bs-target="#set-oz-@Context">
    <div class="d-flex">
        <div class="flex-grow-0">
            @if (Context is not null)
            {
                <Thumbnail UserId="@Context" Size="@ImageService.ImageSize.SMALL" />
            }
        </div>
        <div class="flex-grow-1">
            <div>@user?.FullName</div>
            <div class="small">@player?.GameId</div>
        </div>
    </div>
</div>

<div class="modal fade" id="set-oz-@Context">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Set @user?.FullName to OZ</h5>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" data-bs-toggle="modal" data-bs-target="#set-oz-@Context">Cancel</button>
                <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#set-oz-@Context" @onclick="SetOz">Set OZ</button>
            </div>
        </div>
    </div>
</div>

@code
{
    [Parameter]
    public string Context { get; set; } = null!;

    [Parameter]
    public string UserId { get; set; } = null!;

    [Parameter]
    public string GameId { get; set; } = null!;

    User? user;
    Player? player;

    protected override async Task OnInitializedAsync()
    {
        user = await UserRepo.GetUserById(Context);
        player = await GameRepo.GetPlayerByUserId(GameId, Context);
    }

    async Task SetOz() 
    {
        await GameRepo.SetPlayerToRole(GameId, Context, Player.gameRole.Oz, UserId);
        await GameRepo.RemovePlayerFromOzPool(GameId, Context);
    }
}