@inject IGameRepo GameRepo
@inject IJSRuntime JS
@implements IDisposable

<button class="btn btn-secondary w-100 mt-2" data-bs-toggle="modal" data-bs-target="#oz-modal">
    @OzPoolAction OZ pool
</button>

@*Modal*@
<div class="modal fade" id="oz-modal">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    @OzPoolAction OZ pool?
                </h5>
            </div>
            <div class="modal-body">
                @if (ActiveGame.OzPassword is not null && !inOzPool)
                {
                    <label for="password">OZ pool password</label>
                    <input type="password" @bind="passwordInput" @bind:event="oninput" class="form-control" name="password">
                }
                else
                {
                    <p>You will be @(inOzPool ? "removed from" : "added to") the pool for potential <em>Original Zombies</em></p>
                }
                
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" data-bs-toggle="modal">Cancel</button>
                <button class="btn btn-primary @JoinButtonDisabledClass" data-bs-toggle="modal" @onclick="JoinOrLeaveOzPool">@OzPoolAction</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="oz-join-error-modal">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Error</h5>
            </div>
            <div class="modal-body">
                <p class="text-danger">@joinError</p>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" data-bs-toggle="modal" data-bs-target="#oz-modal">Okay</button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Player ActivePlayer { get; set; } = null!;

    [Parameter]
    public Game ActiveGame { get; set; } = null!;

    bool inOzPool;
    string? passwordInput;
    string? joinError;

    string OzPoolAction => inOzPool ? "Leave" : "Join";

    string? JoinButtonDisabledClass => GetJoinButtonClass();

    string? GetJoinButtonClass()
    {
        if (!HasOzPassword) return null;

        return (HasOzPassword && passwordInput is not null && passwordInput != string.Empty) || inOzPool ? null : "disabled";
    }

    bool HasOzPassword => ActiveGame?.OzPassword is not null;

    async Task JoinOrLeaveOzPool()
    {
        if (inOzPool)
        {
            await GameRepo.RemovePlayerFromOzPool(ActiveGame.Id, ActivePlayer.UserId);
            return;
        }
        if (ActiveGame.OzPassword is not null)
        {
            if (passwordInput != ActiveGame.OzPassword)
            {
                joinError = "Incorrect password";
                await JS.InvokeVoidAsync("toggleModalById", "oz-join-error-modal");
                return;
            }

        }
        await GameRepo.AddPlayerToOzPool(ActiveGame.Id, ActivePlayer.UserId);
    }

    protected override void OnInitialized()
    {
        if (ActivePlayer is not null)
        {
            inOzPool = ActiveGame?.OzPool.Contains(ActivePlayer.UserId) ?? false;
        }

        GameRepo.PlayerJoinedOzPool += PlayerJoined;
        GameRepo.PlayerLeftOzPool += PlayerLeft;
        GameRepo.RandomOzsSet += RandomOzs;
    }

    void PlayerJoined(object? sender, OzPoolUpdatedEventArgs args)
    {
        if (args.game.Id == ActiveGame.Id && args.playerId == ActivePlayer.UserId)
        {
            inOzPool = true;
            InvokeAsync(StateHasChanged);
        }
    }

    void PlayerLeft(object? sender, OzPoolUpdatedEventArgs args)
    {
        if (args.game.Id == ActiveGame.Id && args.playerId == ActivePlayer.UserId)
        {
            inOzPool = false;
            InvokeAsync(StateHasChanged);
        }
    }

    void RandomOzs(object? sender, RandomOzEventArgs args)
    {
        if (args.randomOzIds.Contains(ActivePlayer.UserId))
        {
            inOzPool = false;
            InvokeAsync(StateHasChanged);
        }
    }

    public void Dispose()
    {
        GameRepo.PlayerJoinedOzPool -= PlayerJoined;
        GameRepo.PlayerLeftOzPool -= PlayerLeft;
        GameRepo.RandomOzsSet -= RandomOzs;
    }
}
