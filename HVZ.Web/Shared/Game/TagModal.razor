@inject IUserRepo UserRepo
@inject IGameRepo GameRepo
@implements IDisposable

@if(!ReachedMaxTags)
{
    <button class="btn btn-primary w-100 @OpenModalEnabledClass mt-2" data-bs-toggle="modal" data-bs-target="#tag-modal" id="open-modal">
        Tag
    </button>
    @if (ActiveGame?.IsActive ?? false)
    {
        <div class="modal fade" id="tag-modal">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">
                            Tag
                        </h5>
                    </div>
                    <div class="modal-body">
                        <label for="id-input">ID</label>
                        <input id="id-input" name="id-input" type="number" @bind="receiverId" @bind:event="oninput" class="form-control" placeholder="ID" />

                        @if (tagErrorMsg is not null)
                        {
                            <div class="alert alert-danger d-flex mt-3">
                                <div class="d-flex">
                                    <div class="flex-grow-1" id="display-error-msg">
                                        @tagErrorMsg
                                    </div>
                                    <div class="flex-grow-0">
                                        <button class="btn-close" @onclick="ClearMessages"></button>
                                    </div>
                                </div>
                            </div>
                        }

                        @if (tagSuccessMsg is not null)
                        {
                            <div class="alert alert-success d-flex mt-3">
                                <div class="d-flex">
                                    <div class="flex-grow-1" id="display-success-msg">
                                        @tagSuccessMsg
                                    </div>
                                    <div class="flex-grow-0">
                                        <button class="btn-close" @onclick="ClearMessages"></button>
                                    </div>
                                </div>
                            </div>
                        }

                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-secondary" data-bs-toggle="modal">Close</button>
                        <button class="btn btn-primary @SubmitEnabledClass" @onclick="LogTag" id="tag-btn">Tag</button>
                    </div>
                </div>
            </div>
        </div>
    }
}
else
{
    <div class="row">
        <h5>Select a role</h5>
        <div class="col-6 mx-0">
            <button class="btn btn-secondary w-100" @onclick="SetTargetRoleZombie" data-bs-toggle="modal" data-bs-target="#role-modal">Zombie</button>
        </div>
        <div class="mx-0 col-6">
            <button class="w-100 btn btn-secondary" @onclick="SetTargetRoleHuman" data-bs-toggle="modal" data-bs-target="#role-modal">Human</button>
        </div>
    </div>

    <div class="modal fade" id="role-modal">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Switch to @(targetGameRole.ToString().ToLower())?</h5>
                </div>
                <div class="modal-body">
                    <p>Your game role will be set to @(targetGameRole.ToString().ToLower())</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" data-bs-dismiss="modal" data-bs-target="#role-modal">Cancel</button>
                    <button class="btn btn-primary" data-bs-dismiss="modal" data-bs-target="#role-modal" @onclick="SetPlayerToTargetRole">Set to @(targetGameRole.ToString().ToLower())</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public Player ActivePlayer { get; set; } = null!;

    [Parameter]
    public Game ActiveGame { get; set; } = null!;

    string? receiverId;

    string? tagErrorMsg;
    string? tagSuccessMsg;

    string? SubmitEnabledClass => receiverId?.Length == 4 ? null : "disabled";
    string? OpenModalEnabledClass => ActiveGame?.IsActive ?? false ? null : "disabled";

    bool ReachedMaxTags => ActivePlayer?.Role == Player.gameRole.Oz && ActivePlayer?.Tags >= ActiveGame?.OzMaxTags;

    Player.gameRole targetGameRole;

    void SetTargetRoleHuman() => targetGameRole = Player.gameRole.Human;

    void SetTargetRoleZombie() => targetGameRole = Player.gameRole.Zombie;

    protected override void OnInitialized()
    {
        GameRepo.TagLogged += TagLogged;
    }

    public void Dispose()
    {
        GameRepo.TagLogged -= TagLogged;
    }

    void ClearMessages()
    {
        tagErrorMsg = null;
        tagSuccessMsg = null;
    }

    async Task SetPlayerToTargetRole()
    {
        await GameRepo.SetPlayerToRole(ActiveGame.Id, ActivePlayer.UserId, targetGameRole, "ozmaxtagsreached");
    }

    async void LogTag()
    {
        if (ActiveGame is null)
            throw new ArgumentNullException("Active game cannot be null");

        if (ActivePlayer is null)
            throw new ArgumentNullException("Active player cannot be null");

        if (receiverId is null)
            throw new ArgumentNullException("Make sure the tag button is being properly disabled");

        ClearMessages();

        try
        {
            await GameRepo.LogTag(ActiveGame.Id, ActivePlayer.UserId, receiverId);
            Player targetPlayer = await GameRepo.GetPlayerByGameId(ActiveGame.Id, receiverId);
            User targetUser = await UserRepo.GetUserById(targetPlayer.UserId);

            tagSuccessMsg = $"You tagged {targetUser.FullName}!";
        }
        catch(ArgumentException)
        {
            Player? receiver = await GameRepo.FindPlayerByGameId(ActiveGame.Id, receiverId);

            if (receiver is null)
            {
                tagErrorMsg = $"{receiverId} is not a valid ID number";
            }

            else if (receiver.Role != Player.gameRole.Human)
            {
                tagErrorMsg = $"The player with the ID: {receiverId} is not a human";
            }
        }
        receiverId = null;
        StateHasChanged();
    }

    void TagLogged(object? sender, TagEventArgs args)
    {
        if (args.game.Id == ActiveGame.Id && args.Tagger.UserId == ActivePlayer.UserId)
        {
            ActivePlayer = args.Tagger;
            InvokeAsync(StateHasChanged);
        }
    }

    void RoleChanged(object? sender, PlayerRoleChangedEventArgs args)
    {
        if (args.game.Id == ActiveGame.Id && args.player.UserId == ActivePlayer.UserId)
        {
            ActivePlayer = args.player;
        }
    }
}


