@inject IGameRepo GameRepo
@inject IOrgRepo OrgRepo
@inject IJSRuntime JS

@* Start game *@
<div class="mt-3">
    @if (ActiveGame?.Status == Game.GameStatus.New)
    {
        <button class="btn btn-primary w-100" data-bs-toggle="modal" data-bs-target="#start-game-modal">Start game</button>

        <div class="modal fade" id="start-game-modal">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Start game</h5>
                    </div>
                    <div class="modal-body">
                        <p>Starting the game will allow players to log tags</p>
                        <p><b><em>This cannot be undone</em></b></p>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-secondary" data-bs-dismiss="modal" data-bs-target="#start-game-modal">Cancel</button>
                        <button class="btn btn-primary" data-bs-dismiss="modal" data-bs-target="#start-game-modal" @onclick="StartGame">Start game</button>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <button class="btn btn-primary" @onclick="ToggleGamePaused">@PauseGameAction game</button>

        <button class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#end-game-modal">End game</button>
        
        <div class="modal fade" id="end-game-modal">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">End game</h5>
                    </div>
                    <div class="modal-body">
                        <p>This will end the game for all players</p>
                        <p><b><em>This cannot be undone</em></b></p>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-secondary" data-bs-toggle="modal" data-bs-target="#end-game-modal">Cancel</button>
                        <button class="btn btn-danger" @onclick="EndGame">End game</button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<div class="dropdown mt-3">
    <button class="btn btn-secondary dropdown-toggle w-100" data-bs-toggle="dropdown">
        Default role: @(defaultRole.ToString().ToLower())
    </button>
    <ul class="dropdown-menu">
        <li><a class="dropdown-item" @onclick="() => {defaultRole = Player.gameRole.Human;}">Human</a></li>
        <li><a class="dropdown-item" @onclick="() => {defaultRole = Player.gameRole.Zombie;}">Zombie</a></li>
    </ul>
</div>

<h5 class="mt-3">OZs</h5>
<div>
    <label for="oz-tags">Max OZ Tags</label>
    <input type="number" @bind="numOzTags" @bind:event="oninput" name="oz-tags" class="form-control mb-3">
    <label for="oz-passcode">OZ Pool Password</label>
    <input type="text" @bind="ozPassword" @bind:event="oninput" class="form-control" name="oz-passcode" placeholder="Leave blank for no password">

    @if (UnsavedChanges)
    {
        <div class="row mt-2">
            <div class="col-6">
                <button class="btn btn-success w-100" @onclick="Save">Save</button>
            </div>
            <div class="col-6">
                <button class="btn btn-danger w-100" @onclick="DiscardChanges">Discard</button>
            </div>
        </div>
    }
</div>
<OzPoolList ActiveGame="@ActiveGame" UserId="@UserId" />

@* OZ Password *@

@code
{
    [Parameter]
    public Game ActiveGame { get; set; } = null!;

    [Parameter]
    public string UserId { get; set; } = null!;

    int numOzTags;
    string? ozPassword;
    Player.gameRole defaultRole;

    bool UnsavedChanges => numOzTags != (ActiveGame?.OzMaxTags ?? -1) || ozPassword != ActiveGame?.OzPassword || defaultRole != ActiveGame?.DefaultRole;
    bool GamePaused => ActiveGame?.Status == Game.GameStatus.Paused;

    string PauseGameAction => GamePaused ? "Resume" : "Pause";

    protected override void OnInitialized()
    {
        numOzTags = ActiveGame.OzMaxTags;
        ozPassword = ActiveGame.OzPassword;
        defaultRole = ActiveGame.DefaultRole;
    }

    async Task Save()
    {
        if (ozPassword == string.Empty) ozPassword = null;

        await GameRepo.SetOzTagCount(ActiveGame.Id, numOzTags, UserId);
        await GameRepo.SetOzPassword(ActiveGame.Id, ozPassword, UserId);
        await GameRepo.SetDefaultRole(ActiveGame.Id, defaultRole, UserId);
    }

    void DiscardChanges()
    {
        numOzTags = ActiveGame.OzMaxTags;
        ozPassword = ActiveGame.OzPassword;
    }

    async Task StartGame()
    {
        await GameRepo.StartGame(ActiveGame.Id, UserId);
    }

    async Task EndGame()
    {
        await OrgRepo.EndGame(ActiveGame.OrgId, UserId);
    }

    async Task ToggleGamePaused()
    {
        if (GamePaused)
        {
            await GameRepo.ResumeGame(ActiveGame.Id, UserId);
            return;
        }

        await GameRepo.PauseGame(ActiveGame.Id, UserId);
    }
}
