@inject IGameRepo GameRepo
@implements IDisposable
@inject AuthenticationStateProvider AuthenticationStateProvider

@if (activeGame is not null)
{
    <ActiveGameView ActiveGame="@activeGame" UserId="@userId" />
}
else
{
    <StartGame OrgId="@OrgId" />
}

@code {
    [Parameter]
    public string? ActiveGameId { get; set; }

    [CascadingParameter(Name = "OrgId")]
    public string OrgId { get; set; } = null!;

    Game activeGame = null!;
    string userId = null!;

    protected override bool ShouldRender() => OrgId is not null;

    protected override async Task OnParametersSetAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        userId = authState?.User.Claims.FirstOrDefault(c => c.Type == "DatabaseId")?.Value!;

        if (userId is null)
        {
            throw new ArgumentNullException("Current user is not authenticated and should not have access to GameView");
        }

        if (ActiveGameId is not null)
        {
            activeGame = await GameRepo.GetGameById(ActiveGameId);
        }

        GameRepo.GameCreated += GameCreated;
    }

    void GameCreated(object? sender, GameUpdatedEventArgs eventArgs)
    {
        var game = eventArgs.game;

        if (OrgId == game.OrgId)
        {
            activeGame = game;
            ActiveGameId = game.Id;
            InvokeAsync(StateHasChanged);
        }
    }

    public void Dispose()
    {
        GameRepo.GameCreated -= GameCreated;
    }
}
