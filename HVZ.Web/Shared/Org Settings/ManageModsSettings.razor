@using HVZ.Web.Shared.Users
@using HVZ.Web.Identity.Models
@using Microsoft.AspNetCore.Identity
@using HVZ.Web.Shared.Org_Authorization

@inject IOrgRepo OrgRepo
@inject ILogger<ManageModsSettings> Logger
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="user-list">
    <OrgAuthorizedAdmin>
        <div class="d-grid gap-2">
            <button class="btn btn-primary w-100" id="invite-modal-toggle" data-bs-toggle="modal" data-bs-target="#invite-modal"><i class="fa-solid fa-user-plus"></i> Add new moderator</button>
        </div>
    </OrgAuthorizedAdmin>
    <hr>
    <CascadingValue Value="@ownerId" Name="OwnerId">
        <h4>Admins <span class="badge bg-secondary" id="num-admins">@admins?.Count</span></h4>
        <div id="admins-list">
            <Virtualize Items="@admins" Context="id">
                <UserListItem UserId="@id" OnChange="RefreshMenus" />
            </Virtualize>
        </div>
        <hr>
        <h4>Mods <span class="badge bg-secondary" id="num-mods">@mods?.Count</span></h4>
        <div id="mods-list">
            <Virtualize Items="@mods" Context="id">
                <UserListItem UserId="@id" OnChange="RefreshMenus" />
            </Virtualize>
        </div>
    </CascadingValue>
</div>

@* Invite User Modal *@
<OrgAuthorizedAdmin>
    <div class="modal" id="invite-modal" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Invite new user</h5>
                    <button class="close" data-bs-dismiss="modal" aria-label="close">
                        <i class="fa-solid fa-x fa-xs"></i>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label for="invite-email-input">Email</label>
                        <div class="input-group">
                            <input @bind="InviteEmail" @bind:event="oninput" id="invite-email-input" class="form-control" placeholder="Search...">
                            <div class="input-group-append">
                                <button class="btn btn-success @InviteButtonEnabled()" id="invite-button" @onclick="InviteUser">Invite</button>
                            </div>
                        </div>
                        <span class="text-danger">@errorText</span>
                        <span class="text-success">@successText</span>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
</OrgAuthorizedAdmin>

@code
{
    [CascadingParameter(Name = "OrgId")]
    public string? OrgId { get; set; }

    string inviteEmailTrimmed = "";
    public string? InviteEmail { get; set; }
    string ownerId = "";

    Organization? org;
    HashSet<string>? mods = new HashSet<string>();
    HashSet<string>? admins = new HashSet<string>();
    AuthenticationState? authState;

    string? successText;
    string? errorText;

    protected override async Task OnParametersSetAsync()
    {
        if (OrgId is null) throw new ArgumentNullException("OrgId cannot be null");
        org = await OrgRepo.GetOrgById(OrgId);
        authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        admins = org.Administrators;
        mods = org.Moderators;
        ownerId = org.OwnerId;
    }

    string InviteButtonEnabled() => String.IsNullOrEmpty(InviteEmail?.Trim()) ? "disabled" : "";

    async Task InviteUser()
    {
        inviteEmailTrimmed = InviteEmail?.Trim() ?? "";
        if (String.IsNullOrEmpty(inviteEmailTrimmed)) throw new ArgumentNullException("Invite email cannot be null");
        if (OrgId is null) return;

        ApplicationUser? invitedUser = await UserManager.FindByEmailAsync(inviteEmailTrimmed);

        if (invitedUser is null)
        {
            SetErrorText($"Could not find user with with the email {inviteEmailTrimmed}");
            ClearEmailField();
            return;
        }

        if (mods?.Contains(invitedUser.DatabaseId) ?? false)
        {
            SetErrorText($"{invitedUser.FullName} is already a moderator");
            ClearEmailField();
            return;
        }

        await OrgRepo.AddModerator(OrgId, invitedUser.DatabaseId);
        string? userName = authState?.User.Claims.FirstOrDefault(c => c.Type == "FullName")?.Value;
        string? userId = authState?.User.Claims.FirstOrDefault(c => c.Type == "DatabaseId")?.Value;
        Logger.LogInformation($"{userName}: {userId} has added {invitedUser.FullName}: {invitedUser.DatabaseId} as a moderator to {org?.Name}");
        mods?.Add(invitedUser.DatabaseId);
        SetSuccessText($"Added {invitedUser.FullName} to {org?.Name}");
        ClearEmailField();
    }

    void ClearEmailField()
    {
        InviteEmail = null;
        inviteEmailTrimmed = "";
    }

    async Task RefreshMenus()
    {
        if (OrgId == null) return;

        org = await OrgRepo.FindOrgById(OrgId);
        if (org == null) return;
        mods = org.Moderators;
        admins = org.Administrators;
        ownerId = org.OwnerId;
    }

    void SetSuccessText(string text)
    {
        errorText = null;
        successText = text;
    }

    void SetErrorText(string text)
    {
        successText = null;
        errorText = text;
    }
}
