@using HVZ.Web.Shared.Ui_Helpers
@using Microsoft.Extensions.Logging
@inherits Bunit.TestContext

@code {
    Mock<IGameRepo> mockGameRepo = new Mock<IGameRepo>();
    Mock<ILogger<GameTagCounter>> mockLogger = new Mock<ILogger<GameTagCounter>>();

    readonly string taggerId = "0";
    readonly string taggerUserId = "00";
    readonly string receiverId = "1";
    readonly string receiverUserId = "01";
    readonly string gameName = "Test Game";
    readonly string gameId = "2";
    readonly string orgId = "1234";

    Player taggerBeforeTag = null!;
    Player taggerAfterTag = null!;
    Player tagReceiver = null!;
    Game testGame = null!;

    [OneTimeSetUp]
    public void Setup()
    {
        taggerBeforeTag = new Player(
            userid: taggerUserId,
            gameId: taggerId,
            role: Player.gameRole.Zombie,
            tags: 0,
            joinedGameAt: NodaTime.Instant.MinValue
        );

        taggerAfterTag = new Player(
            userid: taggerUserId,
            gameId: taggerId,
            role: Player.gameRole.Zombie,
            tags: 1,
            joinedGameAt: NodaTime.Instant.MinValue
        );

        tagReceiver = new Player(
            userid: receiverUserId,
            gameId: receiverId,
            role: Player.gameRole.Human,
            tags: 0,
            joinedGameAt: NodaTime.Instant.MinValue
        );

        testGame = new Game(
            name: gameName,
            gameid: gameId,
            creatorid: taggerUserId,
            orgid: orgId,
            createdat: NodaTime.Instant.MinValue,
            isActive: true,
            defaultrole: Player.gameRole.Human,
            players: new HashSet<Player>() { taggerBeforeTag, taggerAfterTag },
            eventLog: new List<GameEventLog>()
        );

        mockGameRepo.Setup(repo => repo.FindPlayerByGameId(gameId, taggerId))
            .ReturnsAsync(taggerBeforeTag);
        Services.AddSingleton<IGameRepo>(mockGameRepo.Object);
    }

    [Test]
    public void Test_NullGameId()
    {
        var cut = Render(@<GameTagCounter Player="@taggerBeforeTag" />);

        Assert.Throws<Bunit.ElementNotFoundException>(
            () => cut.Find("span")
        );
    }

    [Test]
    public void Test_NullPlayer()
    {
        var cut = Render(@<GameTagCounter GameId="@gameId" />);

        Assert.Throws<Bunit.ElementNotFoundException>(
            () => cut.Find("span")
        );
    }

    [Test]
    public void Test_InitializeCorrectTagCount()
    {
        var cut = Render(@<GameTagCounter Player="@taggerBeforeTag" GameId="@gameId" />);

        var count = cut.Find("span");

        count.MarkupMatches(
            @<span>@taggerBeforeTag.Tags</span>
        );
    }

    [Test]
    public void Test_UpdateTagCount()
    {
        var cut = Render(@<GameTagCounter Player="@taggerBeforeTag" GameId="@gameId" />);

        var count = cut.Find("span");

        count.MarkupMatches(
            @<span>@taggerBeforeTag.Tags</span>
        );

        mockGameRepo.Raise(repo => repo.TagLogged += null, new TagEventArgs(testGame, taggerAfterTag, tagReceiver));

        count.MarkupMatches(
            @<span>@taggerAfterTag.Tags</span>
        );
    }

}
