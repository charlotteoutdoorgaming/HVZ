@inherits ComponentTestBase

@code {

    [OneTimeSetUp]
    public void Setup()
    {
        mockUserRepo.Setup(r => r.GetUserById(testUserId))
            .ReturnsAsync(Mock.Of<TestUser>());

        RegisterServices();
    }

    [Test]
    public void Test_RenderList()
    {
        Player testPlayer = Mock.Of<TestPlayer>();
        Game testGame = Mock.Of<TestGame>(p => p.Players == new HashSet<Player>() { testPlayer });

        var cut = Render(
            @<CascadingValue Value="@true" Name="IsMod">
                <PlayerListView ActiveGame="@testGame" UserId="@testUserId" ActivePlayer="@testPlayer" />
            </CascadingValue>
        );

        var list = cut.Find("#players-list");

        Assert.That(list.Children.Count(), Is.EqualTo(3));
    }

    [Test]
    public void Test_AddPlayerEvent()
    {
        Player testPlayer = Mock.Of<TestPlayer>();
        Game testGame = Mock.Of<TestGame>(p => p.Players == new HashSet<Player>() { testPlayer });

        var cut = Render(
            @<CascadingValue Value="@true" Name="IsMod">
                <PlayerListView ActiveGame="@testGame" UserId="@testUserId" ActivePlayer="@testPlayer" />
            </CascadingValue>
        );

        var list = cut.Find("#players-list");

        Player testPlayer2 = Mock.Of<TestPlayer>(p => p.GameId == "6969" && p.UserId == "999999");
        mockGameRepo.Raise(r => r.PlayerJoinedGame += null, new PlayerUpdatedEventArgs(testGame, testPlayer2));


        Assert.That(list.Children.Count(), Is.EqualTo(4));
    }

}
