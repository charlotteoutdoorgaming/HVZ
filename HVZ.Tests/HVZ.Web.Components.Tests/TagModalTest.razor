@inherits ComponentTestBase

@code {
    // Test the tag modal works properly
    string invalidId = "1234";
    string zombiePlayerId = "4321";
    string humanPlayerId = "5555";
    string humanUserId = "9999";

    [OneTimeSetUp]
    public void Setup()
    {
        // Service setup
        mockGameRepo.Setup(
            r => r.LogTag(testGameId, testUserId, invalidId)
        ).ThrowsAsync(new ArgumentException());

        mockGameRepo.Setup(
            r => r.LogTag(testGameId, testUserId, zombiePlayerId)
        ).ThrowsAsync(new ArgumentException());

        mockGameRepo.Setup(
            r => r.LogTag(testGameId, testUserId, humanPlayerId)
        );

        mockGameRepo.Setup(
            r => r.FindPlayerByGameId(testGameId, invalidId)
        ).ReturnsAsync((Player?)null);

        mockGameRepo.Setup(
            r => r.FindPlayerByGameId(testGameId, zombiePlayerId)
        ).ReturnsAsync(Mock.Of<TestPlayer>(p => p.Role == Player.gameRole.Zombie && p.GameId == zombiePlayerId));

        mockGameRepo.Setup(
            r => r.GetPlayerByGameId(testGameId, humanPlayerId)
        ).ReturnsAsync(Mock.Of<TestPlayer>(p => p.GameId == humanPlayerId && p.UserId == humanUserId));

        mockUserRepo.Setup(
            r => r.GetUserById(humanUserId)
        ).ReturnsAsync(Mock.Of<TestUser>(u => u.Id == humanUserId));

        ConfigureTestAuthorization();
        RegisterServices();
    }

    [TestCase("")]
    [TestCase("0")]
    [TestCase("00")]
    [TestCase("000")]
    [TestCase("00000")]
    public void Test_TagButtonDisabled(string inputString)
    {
        Game testGame = Mock.Of<TestGame>(g => g.Status == Game.GameStatus.Active);
        Player testPlayer = Mock.Of<TestPlayer>(p => p.Role == Player.gameRole.Zombie);

        var cut = Render(@<TagModal ActiveGame="@testGame" ActivePlayer="@testPlayer" />);

        var input = cut.Find("#id-input");
        input.Input(inputString);

        var tagBtn = cut.Find("#tag-btn");
        tagBtn.MarkupMatches(
            @<button class:regex="(disabled){1}" id:ignore>Tag</button>
        );
    }

    [Test]
    public void Test_TagButtonEnabled()
    {
        Game testGame = Mock.Of<TestGame>(g => g.Status == Game.GameStatus.Active);
        Player testPlayer = Mock.Of<TestPlayer>(p => p.Role == Player.gameRole.Zombie);

        var cut = Render(@<TagModal ActiveGame="@testGame" ActivePlayer="@testPlayer" />);

        var input = cut.Find("#id-input");
        input.Input("0000");

        var tagBtn = cut.Find("#tag-btn");
        tagBtn.MarkupMatches(
            @<button class:regex="(disabled){0}" id:ignore>Tag</button>
        );
    }

    [Test]
    public void Test_TagFail_InvalidId()
    {
        Game testGame = Mock.Of<TestGame>(g => g.Status == Game.GameStatus.Active);
        Player testPlayer = Mock.Of<TestPlayer>(p => p.Role == Player.gameRole.Zombie);

        var cut = Render(@<TagModal ActiveGame="@testGame" ActivePlayer="@testPlayer" />);

        Assert.Throws<Bunit.ElementNotFoundException>(() => cut.Find("#display-error-msg"));

        var input = cut.Find("#id-input");
        input.Input(invalidId);

        var tagBtn = cut.Find("#tag-btn");
        tagBtn.Click();

        var errorMsg = cut.Find("#display-error-msg");
        errorMsg.MarkupMatches(
            @<div class:ignore id:ignore>
                @invalidId is not a valid ID number
            </div>
        );
    }

    [Test]
    public void Test_TagFail_NonHuman()
    {
        Game testGame = Mock.Of<TestGame>(g => g.Status == Game.GameStatus.Active);
        Player testPlayer = Mock.Of<TestPlayer>(p => p.Role == Player.gameRole.Zombie);

        var cut = Render(@<TagModal ActiveGame="@testGame" ActivePlayer="@testPlayer" />);

        Assert.Throws<Bunit.ElementNotFoundException>(() => cut.Find("#display-error-msg"));

        var input = cut.Find("#id-input");
        input.Input(zombiePlayerId);

        var tagBtn = cut.Find("#tag-btn");
        tagBtn.Click();

        var errorMsg = cut.Find("#display-error-msg");
        errorMsg.MarkupMatches(
            @<div class:ignore id:ignore>
                The player with the ID: @zombiePlayerId is not a human
            </div>
        );
    }

    [Test]
    public void Test_TagSuccess()
    {
        Game testGame = Mock.Of<TestGame>(g => g.Status == Game.GameStatus.Active);
        Player testPlayer = Mock.Of<TestPlayer>(p => p.Role == Player.gameRole.Zombie);

        var cut = Render(@<TagModal ActiveGame="@testGame" ActivePlayer="@testPlayer" />);

        Assert.Throws<Bunit.ElementNotFoundException>(() => cut.Find("#display-success-msg"));

        var input = cut.Find("#id-input");
        input.Input(humanPlayerId);

        var tagBtn = cut.Find("#tag-btn");
        tagBtn.Click();

        var errorMsg = cut.Find("#display-success-msg");
        errorMsg.MarkupMatches(
            @<div class:ignore id:ignore>
                    You tagged @testUserFullName!
            </div>
        );
    }

    [Test]
    public void Test_InactiveGame()
    {
        Game testGame = Mock.Of<TestGame>(g => g.Status == Game.GameStatus.Paused);
        Player testPlayer = Mock.Of<TestPlayer>(p => p.Role == Player.gameRole.Zombie);

        var cut = Render(@<TagModal ActiveGame="@testGame" ActivePlayer="@testPlayer" />);

        var openModalBtn = cut.Find("#open-modal");
        openModalBtn.MarkupMatches(
            @<button class:regex="(disabled){1}" id:ignore data-bs-toggle="modal" data-bs-target:ignore>Tag</button>
        );

        Assert.Throws<Bunit.ElementNotFoundException>(() => cut.Find("#tag-modal"));
    }

    [Test]
    public void Test_ActiveGame()
    {
        Game testGame = Mock.Of<TestGame>(g => g.Status == Game.GameStatus.Active);
        Player testPlayer = Mock.Of<TestPlayer>(p => p.Role == Player.gameRole.Zombie);

        var cut = Render(@<TagModal ActiveGame="@testGame" ActivePlayer="@testPlayer" />);

        var openModalBtn = cut.Find("#open-modal");
        openModalBtn.MarkupMatches(
            @<button class:regex="(disabled){0}" id:ignore data-bs-toggle="modal" data-bs-target:ignore>Tag</button>
        );

        Assert.DoesNotThrow(() => cut.Find("#tag-modal"));
    }
}
