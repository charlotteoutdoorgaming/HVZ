@inherits ComponentTestBase
@using HVZ.Web.Shared.Ui_Helpers

@code {
    [OneTimeSetUp]
    public void Setup()
    {
        RegisterServices();
    }

    [Test]
    public void Test_NullGameId()
    {
        var cut = Render(@<GameRoleTracker />);
        var error = cut.Find("span");
        error.MarkupMatches(@<span>ERROR</span>);
    }

    [Test]
    public void Test_NullPlayer()
    {
        var cut = Render(@<GameRoleTracker GameId="@testGameId" />);
        var error = cut.Find("span");
        error.MarkupMatches(@<span>ERROR</span>);
    }

    [TestCase(Player.gameRole.Human, "Human")]
    [TestCase(Player.gameRole.Zombie, "Zombie")]
    [TestCase(Player.gameRole.Oz, "OZ")]
    public void Test_ExpectedRoleFormatting(Player.gameRole inputRole, string expectedRoleText)
    {
        var testPlayer = Mock.Of<TestPlayer>(p => p.Role == inputRole);
        var cut = Render(@<GameRoleTracker Player="@testPlayer" GameId="@testGameId"/>);

        var role = cut.Find("span");

        role.MarkupMatches(
            @<span>@expectedRoleText</span>
        );
    }

    [Test]
    public void Test_CustomAttributeSplatting()
    {
        var testPlayer = new Player(
            userid: testUserId,
            gameId: testPlayerGameId,
            role: Player.gameRole.Human,
            tags: 0,
            joinedGameAt: NodaTime.Instant.MinValue
        );

        var cut = Render(@<GameRoleTracker class="text-muted" GameId="@testGameId" Player="@testPlayer" /> );

        var role = cut.Find("span");

        role.MarkupMatches(
            @<span diff:ignoreChildren class="text-muted"></span>
        );
    }

    [Test]
    public void Test_UpdateRoleMod()
    {
        var testPlayer = Mock.Of<TestPlayer>();

        var cut = Render(@<GameRoleTracker Player="@testPlayer" GameId="@testGameId" />);
        var role = cut.Find("span");
        role.MarkupMatches(
            @<span>Human</span>
        );

        mockGameRepo.Raise(repo => repo.PlayerRoleChanged += null,
            new PlayerRoleChangedEventArgs(
                Mock.Of<TestGame>(), Mock.Of<TestPlayer>(p => p.Role == Player.gameRole.Zombie), string.Empty, Player.gameRole.Zombie
            ));

        role.MarkupMatches(
            @<span>Zombie</span>
        );
    }

    [Test]
    public void Test_UpdateRoleTag()
    {
        var testPlayer = Mock.Of<TestPlayer>();

        var cut = Render(@<GameRoleTracker Player="@testPlayer" GameId="@testGameId" />);
        var role = cut.Find("span");
        role.MarkupMatches(
            @<span>Human</span>
        );

        mockGameRepo.Raise(repo => repo.TagLogged += null,
            new TagEventArgs(
                Mock.Of<TestGame>(), Mock.Of<TestPlayer>(p => p.Role == Player.gameRole.Zombie && p.GameId=="69"), Mock.Of<TestPlayer>(p => p.Role == Player.gameRole.Zombie)
            ));

        role.MarkupMatches(
            @<span>Zombie</span>
        );
    }
}
