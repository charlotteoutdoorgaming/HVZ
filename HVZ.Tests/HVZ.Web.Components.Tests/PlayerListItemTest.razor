@inherits ComponentTestBase
@using HVZ.Web.Shared.Ui_Helpers

@code {

    [OneTimeSetUp]
    public void Setup()
    {
        mockUserRepo.Setup(r => r.GetUserById(testUserId))
            .ReturnsAsync(Mock.Of<TestUser>());

        RegisterServices();
    }

    [Test]
    public void Test_RenderAsMod()
    {
        Game testGame = Mock.Of<TestGame>();
        Player testPlayer = Mock.Of<TestPlayer>();

        var cut = Render(
            @<CascadingValue Value="@true" Name="IsMod">
                <PlayerListItem ActiveGame="@testGame" Player="@testPlayer" SeesOz="@true" UserId="@testUserId" />
            </CascadingValue>
        );

        Assert.DoesNotThrow(() => cut.FindComponent<Thumbnail>());
        Assert.DoesNotThrow(() => cut.FindComponent<GameTagCounter>());
        Assert.DoesNotThrow(() => cut.FindComponent<GameRoleTracker>());
        Assert.DoesNotThrow(() => cut.Find($"#collapse-{testUserId}"));

        var dropdown = cut.Find(".dropdown-menu");
        dropdown.MarkupMatches(
            @<ul class:ignore>
                <li>
                    <a class:regex="(dropdown-item){1}" id="set-role-zombie-@testUserId">Zombie</a>
                </li>
                <li>
                    <a class:regex="(dropdown-item){1}" id="set-role-oz-@testUserId">OZ</a>
                </li>
            </ul>
        );

        var userEmail = cut.Find($"#email-{testUserId}");
        userEmail.MarkupMatches(
            @<p class:ignore id:ignore>@testUserEmail</p>
        );

        var userId = cut.Find($"#game-id-{testUserId}");
        userId.MarkupMatches(
            @<p class:ignore id:ignore><i class:ignore></i> @testPlayerGameId</p>
        );
    }

    [Test]
    public void Test_RenderAsNonMod()
    {
        Game testGame = Mock.Of<TestGame>();
        Player testPlayer = Mock.Of<TestPlayer>();

        var cut = Render(
            @<CascadingValue Value="@false" Name="IsMod">
                <PlayerListItem ActiveGame="@testGame" Player="@testPlayer" SeesOz="@true" UserId="@testUserId" />
            </CascadingValue>
        );

        Assert.DoesNotThrow(() => cut.FindComponent<Thumbnail>());
        Assert.DoesNotThrow(() => cut.FindComponent<GameTagCounter>());
        Assert.DoesNotThrow(() => cut.FindComponent<GameRoleTracker>());

        Assert.Throws<Bunit.ElementNotFoundException>(() => cut.Find($"#email-{testUserId}"));
        Assert.Throws<Bunit.ElementNotFoundException>(() => cut.Find($"#game-id-{testUserId}"));
    }

    [Test]
    public void Test_RoleChangeModifiesDropdown()
    {
        mockGameRepo.Setup(r => r.SetPlayerToRole(testGameId, testUserId, Player.gameRole.Zombie, testUserId))
            .ReturnsAsync(Mock.Of<TestGame>())
            .Raises(
                r => r.PlayerRoleChanged += null, new PlayerRoleChangedEventArgs(
                    Mock.Of<TestGame>(), Mock.Of<TestPlayer>(p => p.Role == Player.gameRole.Zombie), testUserId, Player.gameRole.Zombie
                )
            );

        Game testGame = Mock.Of<TestGame>();
        Player testPlayer = Mock.Of<TestPlayer>();

        var cut = Render(
            @<CascadingValue Value="@true" Name="IsMod">
                <PlayerListItem ActiveGame="@testGame" Player="@testPlayer" SeesOz="@true" UserId="@testUserId" />
            </CascadingValue>
        );

        var setZombie = cut.Find($"#set-role-zombie-{testUserId}");
        setZombie.Click();

        Assert.Throws<Bunit.ElementNotFoundException>(() => cut.Find($"#set-role-zombie-{testUserId}"));
        Assert.DoesNotThrow(() => cut.Find($"#set-role-human-{testUserId}"));
    }
}
