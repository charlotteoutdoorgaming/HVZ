
@using HVZ.Web.Shared

@inherits Bunit.TestContext

@code
{
    TestAuthorizationContext? authContext;
    Mock<IOrgRepo> mockOrgRepo = new Mock<IOrgRepo>();
    Mock<IUserRepo> mockUserRepo = new Mock<IUserRepo>();
    Mock<ImageService> mockImageService = new Mock<ImageService>();

    [OneTimeSetUp]
    public void Setup()
    {
        mockUserRepo.Setup(repo => repo.GetUserById(It.IsAny<string>())).ReturnsAsync(new User("", "", ""));
        Services.AddSingleton<IOrgRepo>(mockOrgRepo.Object);
        Services.AddSingleton<IUserRepo>(mockUserRepo.Object);
        Services.AddSingleton<ImageService>(mockImageService.Object);
        authContext = this.AddTestAuthorization();
    }

    [Test]
    public void Test_LoggedOutSeesLoginButton()
    {
        authContext?.SetNotAuthorized();

        var cut = Render(
            @<LoginDisplay />
        );

        var button = cut.Find("a");
        button.MarkupMatches(@<a href="Account/Login" class:ignore diff:ignoreChildren></a>);
    }

    [Test]
    public void Test_LoggedInSeesLogOutButton()
    {
        authContext?.SetAuthorized("TEST USER");
        authContext?.SetClaims(
            new System.Security.Claims.Claim("DatabaseId", "1234")
        );

        var cut = Render(
            @<LoginDisplay />
        );

        var button = cut.Find("a");
        button.MarkupMatches(@<a href="Account/Logout" class:ignore diff:ignoreChildren></a>);
    }
}