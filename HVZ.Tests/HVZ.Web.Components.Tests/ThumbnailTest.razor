@using NodaTime
@inherits Bunit.TestContext

@code
{
    readonly Mock<IOrgRepo> mockOrgRepo = new();
    readonly Mock<IUserRepo> mockUserRepo = new();
    readonly Mock<ImageService> mockImageService = new();

    private readonly string orgWithoutImageId = "0";
    private readonly string orgName = "Test Org";
    private readonly string orgWithImageId = "1";
    private readonly string userWithoutImageId = "2";
    private readonly string userName = "Kevin Smith";
    private readonly string userWithImageId = "3";

    [OneTimeSetUp]
    public void Setup()
    {
        mockOrgRepo.Setup(repo => repo.GetOrgById(orgWithoutImageId)).ReturnsAsync(
            new Organization(
                id: orgWithoutImageId,
                name: orgName,
                ownerId: "1",
                moderators: new HashSet<string>(),
                administrators: new HashSet<string>(),
                games: new HashSet<Game>(),
                activeGameId: null,
                createdAt: Instant.MinValue,
                url: "testorg"
                )
            );

        mockUserRepo.Setup(repo => repo.GetUserById(userWithoutImageId)).ReturnsAsync(
            new User(
                userWithoutImageId,
                userName,
                "e@mail.net"
                )
            );

        mockImageService.Setup(service => service.HasUploadedUserImage(userWithImageId)).Returns(true);
        mockImageService.Setup(service => service.HasUploadedOrgImage(orgWithImageId)).Returns(true);
        @* Return false for everything else *@
        mockImageService.SetReturnsDefault(false);

        Services.AddSingleton<ImageService>(mockImageService.Object);
        Services.AddSingleton<IUserRepo>(mockUserRepo.Object);
        Services.AddSingleton<IOrgRepo>(mockOrgRepo.Object);
    }

    [Test]
    public void Test_DefaultThumbnailForUser()
    {
        IRenderedFragment cut = Render(
            @<Thumbnail UserId="@userWithoutImageId"/>
            );

        IElement img = cut.Find("img");
        img.MarkupMatches(
            @<img src="https://ui-avatars.com/api/?name=Kevin+Smith&size=128">
            );
    }

    [TestCase(ImageService.ImageSize.SMALL)]
    [TestCase(ImageService.ImageSize.MEDIUM)]
    [TestCase(ImageService.ImageSize.LARGE)]
    public void Test_DefaultThumbnailForUserWithSize(ImageService.ImageSize size)
    {
        IRenderedFragment cut = Render(
            @<Thumbnail UserId="@userWithoutImageId" Size="size"/>
            );

        IElement img = cut.Find("img");
        string expectedsrc = $"https://ui-avatars.com/api/?name=Kevin+Smith&size={(int)size}";
        img.MarkupMatches(
            @<img src="@expectedsrc">
            );
    }

    [Test]
    public void Test_DefaultThumbnailForOrg()
    {
        IRenderedFragment cut = Render(
            @<Thumbnail OrgId="@orgWithoutImageId"/>
            );

        IElement img = cut.Find("img");
        img.MarkupMatches(
            @<img src="https://ui-avatars.com/api/?name=Test+Org&size=128">
            );
    }

    [TestCase(ImageService.ImageSize.SMALL)]
    [TestCase(ImageService.ImageSize.MEDIUM)]
    [TestCase(ImageService.ImageSize.LARGE)]
    public void Test_DefaultThumbnailForOrgWithSize(ImageService.ImageSize size)
    {
        IRenderedFragment cut = Render(
            @<Thumbnail OrgId="@orgWithoutImageId" Size="size"/>
            );

        IElement img = cut.Find("img");
        string expectedsrc = $"https://ui-avatars.com/api/?name=Test+Org&size={(int)size}";
        img.MarkupMatches(
            @<img src="@expectedsrc">
            );
    }

    [Test]
    public void Test_SavedThumbnailForUser()
    {
        IRenderedFragment cut = Render(
            @<Thumbnail UserId="@userWithImageId"/>
            );

        IElement img = cut.Find("img");
        img.MarkupMatches(
            @<img src="images/users/3_thumbnail_128.jpeg">
            );
    }

    [TestCase(ImageService.ImageSize.SMALL)]
    [TestCase(ImageService.ImageSize.MEDIUM)]
    [TestCase(ImageService.ImageSize.LARGE)]
    public void Test_SavedThumbnailForUserWithSize(ImageService.ImageSize size)
    {
        IRenderedFragment cut = Render(
            @<Thumbnail UserId="@userWithImageId" Size="size"/>
            );

        IElement img = cut.Find("img");
        string expectedsrc = $"images/users/3_thumbnail_{(int)size}.jpeg";
        img.MarkupMatches(
            @<img src="@expectedsrc">
            );
    }

    [Test]
    public void Test_SavedThumbnailForOrg()
    {
        IRenderedFragment cut = Render(
            @<Thumbnail OrgId="@orgWithImageId"/>
            );

        IElement img = cut.Find("img");
        img.MarkupMatches(
            @<img src="images/orgs/1_thumbnail_128.jpeg">
            );
    }

    [TestCase(ImageService.ImageSize.SMALL)]
    [TestCase(ImageService.ImageSize.MEDIUM)]
    [TestCase(ImageService.ImageSize.LARGE)]
    public void Test_SavedThumbnailForOrgrWithSize(ImageService.ImageSize size)
    {
        IRenderedFragment cut = Render(
            @<Thumbnail OrgId="@orgWithImageId" Size="size"/>
            );

        IElement img = cut.Find("img");
        string expectedsrc = $"images/orgs/1_thumbnail_{(int)size}.jpeg";
        img.MarkupMatches(
            @<img src="@expectedsrc">
            );
    }

    [Test]
    public void Test_AttributeSplatting()
    {
        IRenderedFragment cut = Render(
            @<Thumbnail UserId="@userWithImageId" id="thumbnail" class="img"/>
            );

        IElement imgById = cut.Find("#thumbnail");
        IElement imgByClass = cut.Find(".img");

        imgById.MarkupMatches(
            @<img src="images/users/3_thumbnail_128.jpeg" id="thumbnail" class="img">
            );

        imgByClass.MarkupMatches(
            @<img src="images/users/3_thumbnail_128.jpeg" id="thumbnail" class="img">
            );
    }
}