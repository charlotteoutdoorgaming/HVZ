@inherits Bunit.TestContext
@using HVZ.Web.Shared.Ui_Helpers

@code {
    Mock<IOrgRepo> mockOrgRepo = new Mock<IOrgRepo>();
    Mock<IGameRepo> mockGameRepo = new Mock<IGameRepo>();

    private readonly string taggerId = "01";
    private readonly string taggerGameId = "01";
    private readonly string receiverId = "02";
    private readonly string receiverGameId = "02";
    private readonly string game_baseId = "11";

    Player tagger = null!;
    Player receiver = null!;
    Player receiverTagged = null!;

    Game game_base = null!;
    Game game_afterTag = null!;
    Game game_afterJoin = null!;
    Game game_afterRoleChange = null!;
    Game game_1H1Z = null!;
    Game game_1H2Z = null!;
    Game game_4H3Z = null!;
    Game game_1H1Z1O = null!;

    Player GenericHumanPlayer()
    {
        return new Player(
            userid: Guid.NewGuid().ToString(),
            gameId: Guid.NewGuid().ToString(),
            role: Player.gameRole.Human,
            tags: 0,
            joinedGameAt: NodaTime.Instant.FromDateTimeUtc(DateTime.UtcNow)
        );
    }

    Player GenericZombiePlayer()
    {
        return new Player(
            userid: Guid.NewGuid().ToString(),
            gameId: Guid.NewGuid().ToString(),
            role: Player.gameRole.Zombie,
            tags: 0,
            joinedGameAt: NodaTime.Instant.FromDateTimeUtc(DateTime.UtcNow)
        );
    }

    Player GenericOzPlayer()
    {
        return new Player(
        userid: Guid.NewGuid().ToString(),
        gameId: Guid.NewGuid().ToString(),
        role: Player.gameRole.Oz,
        tags: 0,
        joinedGameAt: NodaTime.Instant.FromDateTimeUtc(DateTime.UtcNow)
    );
    }

    [OneTimeSetUp]
    public void Setup()
    {
        #region Test Variables
        NodaTime.Instant time = NodaTime.Instant.FromDateTimeUtc(DateTime.UtcNow);

        tagger = new Player(
            userid: taggerId,
            gameId: taggerGameId,
            role: Player.gameRole.Zombie,
            tags: 1,
            joinedGameAt: time
        );

        receiver = new Player(
            userid: receiverId,
            gameId: receiverGameId,
            role: Player.gameRole.Human,
            tags: 0,
            joinedGameAt: time
        );

        receiverTagged = new Player(
            userid: receiverId,
            gameId: receiverGameId,
            role: Player.gameRole.Zombie,
            tags: 0,
            joinedGameAt: time
        );

        game_base = new(
            name: "Test Game",
            gameid: game_baseId,
            creatorid: "01",
            orgid: "001",
            createdat: time,
            isActive: true,
            defaultrole: Player.gameRole.Human,
            players: new HashSet<Player>()
            {
                tagger, receiver
            },
            eventLog: new List<GameEventLog>()
        );

        game_afterTag = new(
            name: "Test Game",
            gameid: game_baseId,
            creatorid: "01",
            orgid: "001",
            createdat: time,
            isActive: true,
            defaultrole: Player.gameRole.Human,
            players: new HashSet<Player>()
            {
                tagger, receiverTagged
            },
            eventLog: new List<GameEventLog>()
        );

        game_afterJoin = new(
            name: "Test Game",
            gameid: game_baseId,
            creatorid: "01",
            orgid: "001",
            createdat: time,
            isActive: true,
            defaultrole: Player.gameRole.Human,
            players: new HashSet<Player>()
            {
                tagger, receiver, GenericHumanPlayer()
            },
            eventLog: new List<GameEventLog>()
        );

        game_afterRoleChange = new(
            name: "Test Game",
            gameid: game_baseId,
            creatorid: "01",
            orgid: "001",
            createdat: time,
            isActive: true,
            defaultrole: Player.gameRole.Human,
            players: new HashSet<Player>()
            {
                tagger, receiverTagged
            },
            eventLog: new List<GameEventLog>()
        );

        game_1H1Z = new(
            name: "1H 1Z",
            gameid: game_baseId,
            creatorid: "01",
            orgid: "001",
            createdat: time,
            isActive: true,
            defaultrole: Player.gameRole.Human,
            players: new HashSet<Player>()
            {
                GenericHumanPlayer(), GenericZombiePlayer()
            },
            eventLog: new List<GameEventLog>()
        );

        game_1H2Z = new(
            name: "1H 1Z",
            gameid: game_baseId,
            creatorid: "01",
            orgid: "001",
            createdat: time,
            isActive: true,
            defaultrole: Player.gameRole.Human,
            players: new HashSet<Player>()
            {
                GenericHumanPlayer(), GenericZombiePlayer(), GenericZombiePlayer()
            },
            eventLog: new List<GameEventLog>()
        );

        game_4H3Z = new(
            name: "1H 1Z",
            gameid: game_baseId,
            creatorid: "01",
            orgid: "001",
            createdat: time,
            isActive: true,
            defaultrole: Player.gameRole.Human,
            players: new HashSet<Player>()
            {
                GenericHumanPlayer(),
                GenericHumanPlayer(),
                GenericHumanPlayer(),
                GenericHumanPlayer(),
                GenericZombiePlayer(),
                GenericZombiePlayer(),
                GenericZombiePlayer()
            },
            eventLog: new List<GameEventLog>()
        );

        game_1H1Z1O = new(
            name: "1H 1Z",
            gameid: game_baseId,
            creatorid: "01",
            orgid: "001",
            createdat: time,
            isActive: true,
            defaultrole: Player.gameRole.Human,
            players: new HashSet<Player>()
            {
                GenericHumanPlayer(), GenericZombiePlayer(), GenericOzPlayer()
            },
            eventLog: new List<GameEventLog>()
        );

        #endregion

        Services.AddSingleton<IGameRepo>(mockGameRepo.Object);

    }

    // Display
    [TestCase(0, 1, 50, 1, 50)]
    [TestCase(1, 1, 33, 2, 67)]
    [TestCase(2, 4, 57, 3, 43)]
    [TestCase(3, 2, 67, 1, 33)]
    public void Test_BarSizes(int gameIndex, int expectedH, int expectedHRatio, int expectedZ, int expectedZRatio)
    {
        Game[] games = new Game[] { game_1H1Z, game_1H2Z, game_4H3Z, game_1H1Z1O };

        Game game = games[gameIndex];

        var cut = Render(
            @<HumanZombieRatioBar ActiveGame="@game" />
        );

        // Total 100%
        Assert.That(expectedHRatio + expectedZRatio, Is.EqualTo(100));

        var humanBar = cut.Find("#human-bar");
        var zombieBar = cut.Find("#zombie-bar");

        humanBar.MarkupMatches(
            @<div class:ignore id="human-bar" style="width:@expectedHRatio%;">
                @expectedH H
            </div>
        );

        zombieBar.MarkupMatches(
            @<div class:ignore id="zombie-bar" style="width:@expectedZRatio%;">
                @expectedZ Z
            </div>
        );
    }

    // Events
    [Test]
    public void Test_UpdateOnPlayerJoin()
    {
        var cut = Render(
            @<HumanZombieRatioBar ActiveGame="@game_base" />
        );

        var humanBar = cut.Find("#human-bar");
        var zombieBar = cut.Find("#zombie-bar");

        humanBar.MarkupMatches(
            @<div class:ignore id="human-bar" style="width:50%;">
                1 H
            </div>
        );

        zombieBar.MarkupMatches(
            @<div class:ignore id="zombie-bar" style="width:50%;">
                1 Z
            </div>
        );

        mockGameRepo.Raise(repo => repo.PlayerJoinedGame += null,
            new PlayerUpdatedEventArgs(game_afterJoin, receiver));

        humanBar.MarkupMatches(
            @<div class:ignore id="human-bar" style="width:67%;">
                2 H
            </div>
        );

        zombieBar.MarkupMatches(
            @<div class:ignore id="zombie-bar" style="width:33%;">
                1 Z
            </div>
        );
    }

    [Test]
    public void Test_UpdateOnPlayerTagged()
    {
        var cut = Render(
            @<HumanZombieRatioBar ActiveGame="@game_base" />
        );

        var humanBar = cut.Find("#human-bar");
        var zombieBar = cut.Find("#zombie-bar");

        humanBar.MarkupMatches(
            @<div class:ignore id="human-bar" style="width:50%;">
                1 H
            </div>
        );

        zombieBar.MarkupMatches(
            @<div class:ignore id="zombie-bar" style="width:50%;">
                1 Z
            </div>
        );

        mockGameRepo.Raise(repo => repo.TagLogged += null,
            new TagEventArgs(game_afterTag, tagger, receiver));

        humanBar.MarkupMatches(
            @<div class:ignore id="human-bar" style="width:0%;">
                0 H
            </div>
        );

        zombieBar.MarkupMatches(
            @<div class:ignore id="zombie-bar" style="width:100%;">
                2 Z
            </div>
        );
    }

    [Test]
    public void Test_UpdateOnPlayerRoleChanged()
    {
        var cut = Render(
            @<HumanZombieRatioBar ActiveGame="@game_base" />
        );

        var humanBar = cut.Find("#human-bar");
        var zombieBar = cut.Find("#zombie-bar");

        humanBar.MarkupMatches(
            @<div class:ignore id="human-bar" style="width:50%;">
                1 H
            </div>
        );

        zombieBar.MarkupMatches(
            @<div class:ignore id="zombie-bar" style="width:50%;">
                1 Z
        </div>
    );

        //mockGameRepo.Object.SetPlayerToRole(game_baseId, receiverId, Player.gameRole.Zombie, "0");

        mockGameRepo.Raise(repo => repo.PlayerRoleChanged += null, 
            new PlayerRoleChangedEventArgs(
                game_afterRoleChange, receiverTagged, "0", Player.gameRole.Zombie));

        humanBar.MarkupMatches(
            @<div class:ignore id="human-bar" style="width:0%;">
                0 H
            </div>
        );

        zombieBar.MarkupMatches(
            @<div class:ignore id="zombie-bar" style="width:100%;">
                2 Z
            </div>
        );
    }

}
