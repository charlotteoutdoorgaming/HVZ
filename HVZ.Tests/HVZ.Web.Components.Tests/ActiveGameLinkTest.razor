
@*@inherits Bunit.TestContext*@
@inherits ComponentTestBase
@using HVZ.Web.Shared.Ui_Helpers
@using NodaTime

@code {
    Game testGame = Mock.Of<TestGame>();

    [OneTimeSetUp]
    public void Setup()
    {
        // Get test user
        mockUserRepo.Setup(repo => repo.GetUserById(testUserId))
            .ReturnsAsync(Mock.Of<TestUser>());

        // Get test org
        mockOrgRepo.Setup(repo => repo.FindOrgById(testOrgId))
            .ReturnsAsync(Mock.Of<TestOrg>());

        mockOrgRepo.Setup(repo => repo.GetOrgById(testOrgId))
            .ReturnsAsync(Mock.Of<TestOrg>());

        RegisterServices();

    }

    [Test]
    public void Test_NullActiveGame()
    {
        var cut = Render(@<ActiveGameLink UserId="@testUserId" />);

        Assert.Throws<Bunit.ElementNotFoundException>(
            () => cut.Find("a")
        );
    }

    [Test]
    public void Test_UrlLeadsToOrg()
    {

        var cut = Render(@<ActiveGameLink ActiveGame="@testGame"  UserId="@testUserId" />);

        var anchor = cut.Find("a");

        anchor.MarkupMatches(
            @<a href="/org/@testOrgUrl" style:ignore class:ignore diff:ignoreChildren></a>
        );
    }

    [Test]
    public void Test_DisplayOrgName()
    {
        var cut = Render(@<ActiveGameLink ActiveGame="@testGame" UserId="@testUserId" />);

        var orgNameElement = cut.Find("#org-name");

        orgNameElement.MarkupMatches(
            @<h5 class:ignore id="org-name" style="text-overflow:ellipsis;overflow:hidden;white-space:nowrap;font-size:medium">@testOrgName</h5>
        );
    }

    [Test]
    public void Test_DisplayStartDate()
    {
        var cut = Render(@<ActiveGameLink ActiveGame="@testGame" UserId="@testUserId" />);

        var dateElement = cut.Find("#start-date");

        dateElement.MarkupMatches(
            @<p class:ignore id="start-date">Dec 12 2023</p>
        );
    }

    [Test]
    public void Test_DisplayGameName()
    {
        var cut = Render(@<ActiveGameLink ActiveGame="@testGame" UserId="@testUserId" />);

        var nameElement = cut.Find("#game-name");

        nameElement.MarkupMatches(
            @<p id="game-name" class:ignore style="text-overflow:ellipsis;overflow:hidden;white-space:nowrap;">@testGameName</p>
        );

    }

    [Test]
    public void Test_DisplayGameId()
    {
        var cut = Render(@<ActiveGameLink ActiveGame="@testGame" UserId="@testUserId" />);

        var idElement = cut.Find("#game-id");

        idElement.MarkupMatches(
            @<span diff:ignoreAttributes><i diff:ignore></i> @testPlayerGameId</span>
        );
    }

    [Test]
    public void Test_DisplayGameRole()
    {
        var testPlayer = Mock.Of<TestPlayer>();
        var cut = Render(@<ActiveGameLink ActiveGame="@testGame" UserId="@testUserId" />);

        var roleElement = cut.Find("#game-role");

        roleElement.MarkupMatches(
            @<span diff:ignoreAttributes><i diff:ignore></i> @testPlayer.Role.ToString()</span>
        );
    }

    [Test]
    public void Test_DisplayTags()
    {
        var cut = Render(@<ActiveGameLink ActiveGame="@testGame" UserId="@testUserId" />);

        cut.FindComponent<GameTagCounter>();
    }

    [Test]
    public void Test_ContainsOrgImage()
    {
        var cut = Render(@<ActiveGameLink ActiveGame="@testGame" UserId="@testUserId" />);

        cut.FindComponent<Thumbnail>();
    }

    [Test]
    public void Test_ContainsRatioBar()
    {
        var cut = Render(@<ActiveGameLink ActiveGame="@testGame" UserId="@testUserId" />);

        cut.FindComponent<HumanZombieRatioBar>();
    }

}
