@using HVZ.Web.Shared.User_Settings
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims
@inherits ComponentTestBase

@code {
    string testPassword = "t3stP@ssword";
    string newTestPassword = "n3wTe5tP@word!";
    ApplicationUser testApplicationUser = new ApplicationUser() 
    { 
        FullName = testUserFullName, 
        DatabaseId = testUserId 
    };

    [OneTimeSetUp]
    public void Setup()
    {
        mockUserManager.Setup(m => m.GetUserAsync(It.IsAny<ClaimsPrincipal>()))
            .ReturnsAsync(testApplicationUser);

        mockUserManager.Setup(m => m.CheckPasswordAsync(testApplicationUser, testPassword))
            .ReturnsAsync(true);

        mockUserManager.Setup(m => m.ChangePasswordAsync(testApplicationUser, testPassword, It.IsAny<string>()))
            .ReturnsAsync(Mock.Of<IdentityResult>(r => r.Succeeded == true));

        mockUserManager.SetReturnsDefault<bool>(false);

        RegisterServices();
        ConfigureTestAuthorization();
    }

    [TestCase("current-password")]
    [TestCase("new-password")]
    [TestCase("confirm-password")]
    public void Test_VerifyInitialState(string identifier)
    {
        var cut = Render(@<PasswordChange />);

        var errors = cut.Find($"#{identifier}-errors");
        var input = cut.Find($"#{identifier}");

        errors.MarkupMatches(
            @<ul class="text-danger" id:ignore></ul>
        );

        input.MarkupMatches(@<input type="password" class:regex="(is-invalid){0}" placeholder:ignore id="@identifier" />);
    }

    [Test]
    public void Test_CurrentPasswordRequired()
    {
        var cut = Render(@<PasswordChange />);

        var submitButton = cut.Find("#submit-btn");
        var errors = cut.Find("#current-password-errors");

        submitButton.Click();

        errors.MarkupMatches(
            @<ul class:ignore id:ignore>
                <li>Required</li>
            </ul>
        );

        var input = cut.Find("#current-password");
        input.MarkupMatches(@<input id:ignore type:ignore class:regex="(is-invalid){1}" placeholder:ignore />);
    }

    [Test]
    public void Test_IncorrectPassword()
    {
        var cut = Render(@<PasswordChange />);

        var submitButton = cut.Find("#submit-btn");
        var passwordInput = cut.Find("#current-password");
        passwordInput.Change("incorrectpassword");
        submitButton.Click();

        var errors = cut.Find("#current-password-errors");
        errors.MarkupMatches(
            @<ul class:ignore id:ignore>
                <li>Incorrect password</li>
            </ul>
        );

        passwordInput.MarkupMatches(@<input id:ignore type:ignore class:regex="(is-invalid){1}" placeholder:ignore value:ignore />);
    }

    [Test]
    public void Test_EmptyNewPassword()
    {
        var cut = Render(@<PasswordChange />);

        var submitButton = cut.Find("#submit-btn");
        var input = cut.Find("#new-password");
        var errors = cut.Find("#new-password-errors");

        submitButton.Click();

        errors.MarkupMatches(
            @<ul class:ignore id:ignore>
                <li>Required</li>
                <li diff:ignore></li>
            </ul>
        );

        input.MarkupMatches(@<input type:ignore id:ignore class:regex="(is-invalid){1}" placeholder:ignore />);
    }

    [Test]
    public void Test_PasswordDoesNotMeetRequirements()
    {
        var cut = Render(@<PasswordChange />);

        var submitButton = cut.Find("#submit-btn");
        var input = cut.Find("#new-password");
        var errors = cut.Find("#new-password-errors");

        input.Change("invalidPassword");

        submitButton.Click();

        errors.MarkupMatches(
            @<ul class:ignore id:ignore>
                <li diff:ignore></li>
            </ul>
        );

        input.MarkupMatches(@<input type:ignore id:ignore class:regex="(is-invalid){1}" placeholder:ignore value:ignore />);
    }

    [Test]
    public void Test_ConfirmPasswordEmpty()
    {
        var cut = Render(@<PasswordChange />);

        var submitButton = cut.Find("#submit-btn");

        var input = cut.Find("#confirm-password");
        var errors = cut.Find("#confirm-password-errors");

        submitButton.Click();

        errors.MarkupMatches(
            @<ul class:ignore id:ignore>
                <li>Required</li>
            </ul>
        );

        input.MarkupMatches(@<input type:ignore id:ignore class:regex="(is-invalid){1}" placeholder:ignore />);
    }

    [Test]
    public void Test_ConfirmPasswordDoesNotMatchNewPassword()
    {
        var cut = Render(@<PasswordChange />);

        var submitButton = cut.Find("#submit-btn");

        var newPasswordInput = cut.Find("#new-password");
        var confirmPasswordInput = cut.Find("#confirm-password");
        var errors = cut.Find("#confirm-password-errors");

        newPasswordInput.Change("Password1");
        confirmPasswordInput.Change("Password2");

        submitButton.Click();

        errors.MarkupMatches(
            @<ul class:ignore id:ignore>
                <li>Passwords must match</li>
            </ul>
        );

        confirmPasswordInput.MarkupMatches(@<input type:ignore id:ignore class:regex="(is-invalid){1}" placeholder:ignore value:ignore />);
    }

    [Test]
    public void Test_Success()
    {
        var cut = Render(@<PasswordChange />);

        var currentPasswordInput = cut.Find("#current-password");
        var currentPasswordErrors = cut.Find("#current-password-errors");
        var newPasswordInput = cut.Find("#new-password");
        var newPasswordErrors = cut.Find("#new-password-errors");
        var confirmPasswordInput = cut.Find("#confirm-password");
        var confirmPasswordErrors = cut.Find("#confirm-password-errors");
        var submitButton = cut.Find("#submit-btn");

        currentPasswordInput.Change(testPassword);
        newPasswordInput.Change(newTestPassword);
        confirmPasswordInput.Change(newTestPassword);

        submitButton.Click();

        var successMessage = cut.Find("#success");

        successMessage.MarkupMatches(@<span class="text-success" id:ignore>Success</span>);
        currentPasswordErrors.MarkupMatches(@<ul class:ignore id:ignore></ul>);
        newPasswordErrors.MarkupMatches(@<ul class:ignore id:ignore></ul>);
        confirmPasswordErrors.MarkupMatches(@<ul class:ignore id:ignore></ul>);
    }

    [TestCase("current-password")]
    [TestCase("new-password")]
    [TestCase("confirm-password")]
    public void Test_ClearErrorsOnOpen(string identifier)
    {
        var cut = Render(@<PasswordChange />);

        var submitButton = cut.Find("#submit-btn");
        var openButton = cut.Find("#open-modal-btn");

        submitButton.Click();
        openButton.Click();

        // Confirm that there are no errors
        var errors = cut.Find($"#{identifier}-errors");
        var input = cut.Find($"#{identifier}");

        errors.MarkupMatches(
            @<ul class="text-danger" id:ignore></ul>
        );

        input.MarkupMatches(@<input type:ignore class:regex="(is-invalid){0}" placeholder:ignore id:ignore />);
    }
}
