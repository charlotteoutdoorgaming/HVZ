@using HVZ.Web.Shared.Org_Authorization
@using NodaTime
@inherits ComponentTestBase

@code
{
    private string adminId = "2";
    private string modId = "3";
    private string unauthorizedId = "4";

    private Organization org = null!;

    [OneTimeSetUp]
    public void Setup()
    {
        org = Mock.Of<TestOrg>(x => x.Moderators == new HashSet<string>() { modId } && x.Administrators == new HashSet<string>() { adminId });

        mockOrgRepo.Setup(repo => repo.IsModOfOrg(testOrgId, adminId)).ReturnsAsync(false);
        mockOrgRepo.Setup(repo => repo.IsAdminOfOrg(testOrgId, adminId)).ReturnsAsync(true);

        mockOrgRepo.Setup(repo => repo.IsModOfOrg(testOrgId, modId)).ReturnsAsync(true);
        mockOrgRepo.Setup(repo => repo.IsAdminOfOrg(testOrgId, modId)).ReturnsAsync(false);

        mockOrgRepo.Setup(repo => repo.IsModOfOrg(testOrgId, unauthorizedId)).ReturnsAsync(false);
        mockOrgRepo.Setup(repo => repo.IsAdminOfOrg(testOrgId, unauthorizedId)).ReturnsAsync(false);

        mockOrgRepo.Setup(repo => repo.GetOrgById(testOrgId)).ReturnsAsync(org);

        RegisterServices();
        ConfigureTestAuthorization();

    }

    IRenderedFragment RenderAdminContent()
        => Render(
            @<OrgAuth OrgId="@testOrgId">
                <OrgAuthorizedAdmin>
                    <p class="admin-content">admin</p>
                </OrgAuthorizedAdmin>
            </OrgAuth>
        );

    IRenderedFragment RenderModContent()
        => Render(
            @<OrgAuth OrgId="@testOrgId">
                <OrgAuthorizedModerator>
                    <p class="mod-content">mod</p>
                </OrgAuthorizedModerator>
            </OrgAuth>
        );
    
    IRenderedFragment RenderNestedContent()
        => Render(
            @<OrgAuth OrgId="@testOrgId">
                <OrgAuthorizedModerator>
                    <OrgAuthorizedAdmin>
                        <p class="admin-content"></p>
                    </OrgAuthorizedAdmin>
                </OrgAuthorizedModerator>
            </OrgAuth>
        );

#region Permissions

    [Test]
    public void Test_AdminHasAdminPermissions()
    {
        authContext?.SetClaims(
            new Claim("DatabaseId", adminId)
        );
        
        IRenderedComponent<OrgAuth> cut = RenderComponent<OrgAuth>(parameter => parameter
            .Add(p => p.OrgId, testOrgId));
        OrgAuth auth = cut.Instance;

        Assert.That(auth.IsAdmin, Is.True);
    }

    [Test]
    public void Test_AdminHasModPermissions()
    {
        authContext?.SetClaims(
            new Claim("DatabaseId", adminId)
        );

        IRenderedComponent<OrgAuth> cut = RenderComponent<OrgAuth>(parameter => parameter
            .Add(p => p.OrgId, testOrgId));
        OrgAuth auth = cut.Instance;

        Assert.That(auth.IsMod, Is.True);
    }

    [Test]
    public void Test_ModDoesNotHaveAdminPermissions()
    {
        authContext?.SetClaims(
            new Claim("DatabaseId", modId)
        );

        IRenderedComponent<OrgAuth> cut = RenderComponent<OrgAuth>(parameter => parameter
            .Add(p => p.OrgId, testOrgId));
        OrgAuth auth = cut.Instance;

        Assert.That(auth.IsAdmin, Is.False);
    }

    [Test]
    public void Test_ModHasAdminPermissions()
    {
        authContext?.SetClaims(
            new Claim("DatabaseId", modId)
        );

        IRenderedComponent<OrgAuth> cut = RenderComponent<OrgAuth>(parameter => parameter
            .Add(p => p.OrgId, testOrgId));
        OrgAuth auth = cut.Instance;

        Assert.That(auth.IsMod, Is.True);
    }

    [Test]
    public void Test_UnauthorizedDoesNotHaveAdminPermissions()
    {
        authContext?.SetClaims(
            new Claim("DatabaseId", unauthorizedId)
        );

        IRenderedComponent<OrgAuth> cut = RenderComponent<OrgAuth>(parameter => parameter
            .Add(p => p.OrgId, testOrgId));
        OrgAuth auth = cut.Instance;

        Assert.That(auth.IsAdmin, Is.False);
    }

    [Test]
    public void Test_UnauthorizedDoesNotHaveModPermissions()
    {
        authContext?.SetClaims(
            new Claim("DatabaseId", unauthorizedId)
        );

        IRenderedComponent<OrgAuth> cut = RenderComponent<OrgAuth>(
            parameter => parameter
            .Add(p => p.OrgId, testOrgId));
        OrgAuth auth = cut.Instance;

        Assert.That(auth.IsMod, Is.False);
    }

    [Test]
    public void Test_OwnerIdValue()
    {
        IRenderedComponent<OrgAuth> cut = RenderComponent<OrgAuth>(
            parameter => parameter
            .Add(p => p.OrgId, testOrgId));
        OrgAuth auth = cut.Instance;

        Assert.That(auth.OwnerId == testUserId, Is.True);
    }

    [Test]
    public void Test_OrgValue()
    {
        IRenderedComponent<OrgAuth> cut = RenderComponent<OrgAuth>(
            parameter => parameter
            .Add(p => p.OrgId, testOrgId));
        OrgAuth auth = cut.Instance;

        Assert.That(auth.Org == org, Is.True);
    }
#endregion

#region Semantic HTML

    [Test]
    public void Test_AdminSeesAdminConent()
    {
        authContext?.SetClaims(
            new Claim("DatabaseId", adminId)
        );

        var cut = RenderAdminContent();

        var adminContent = cut.Find(".admin-content");
        adminContent.MarkupMatches(@<p diff:ignore>admin</p>);
    }

    [Test]
    public void Test_AdminSeesModContent()
    {
        authContext?.SetClaims(
            new Claim("DatabaseId", adminId)
        );

        var cut = RenderModContent();

        var modContent = cut.Find(".mod-content");
        modContent.MarkupMatches(@<p diff:ignore>mod</p>);
    }

    [Test]
    public void Test_AdminSeesPublicContent()
    {
        authContext?.SetClaims(
            new Claim("DatabaseId", adminId)
        );

        var cut = Render(
            @<OrgAuth OrgId="@testOrgId">
                <p class="public-content">public</p>
            </OrgAuth>
        );

        var publicContent = cut.Find(".public-content");
        publicContent.MarkupMatches(@<p diff:ignore>public</p>);
    }

    [Test]
    public void Test_AdminSeesNestedContent()
    {
        authContext?.SetClaims(
            new Claim("DatabaseId", adminId)
        );

        var cut = RenderNestedContent();

        var adminContent = cut.Find(".admin-content");
        adminContent.MarkupMatches(@<p diff:ignore>admin</p>);
    }

    [Test]
    public void Test_ModDoesNotSeeAdminContent()
    {
        authContext?.SetClaims(
            new Claim("DatabaseId", modId)
        );

        var cut = RenderAdminContent();

        Assert.Throws<Bunit.ElementNotFoundException>(() => cut.Find(".admin-content"));
    }

    [Test]
    public void Test_ModSeesModContent()
    {
        authContext?.SetClaims(
            new Claim("DatabaseId", modId)
        );

        var cut = RenderModContent();

        var modContent = cut.Find(".mod-content");
        modContent.MarkupMatches(@<p diff:ignore>mod</p>);
    }

    [Test]
    public void Test_ModSeesPublicContent()
    {
        authContext?.SetClaims(
            new Claim("DatabaseId", modId)
        );

        var cut = Render(
            @<OrgAuth OrgId="@testOrgId">
                <p class="public-content">public</p>
            </OrgAuth>
        );

        var publicContent = cut.Find(".public-content");
        publicContent.MarkupMatches(@<p diff:ignore>public</p>);
    }

    [Test]
    public void Test_ModDoesNotSeeNestedContent()
    {
        authContext?.SetClaims(
            new Claim("DatabaseId", modId)
        );

        var cut = RenderNestedContent();

        Assert.Throws<Bunit.ElementNotFoundException>(() => cut.Find(".admin-content"));
    }

    [Test]
    public void Test_UnauthorizedDoesNotSeeAdminContent()
    {
        authContext?.SetClaims(
            new Claim("DatabaseId", unauthorizedId)
        );

        var cut = RenderAdminContent();

        Assert.Throws<Bunit.ElementNotFoundException>(() => cut.Find(".admin-content"));
    }

    [Test]
    public void Test_UnauthorizedDoesNotSeeModContent()
    {
        authContext?.SetClaims(
            new Claim("DatabaseId", unauthorizedId)
        );
        
        var cut = RenderModContent();

        Assert.Throws<Bunit.ElementNotFoundException>(() => cut.Find(".mod-content"));
    }

    [Test]
    public void Test_UnauthorizedSeesPublicContent()
    {
        authContext?.SetClaims(
            new Claim("DatabaseId", unauthorizedId)
        );

        var cut = Render(
            @<OrgAuth OrgId="@testOrgId">
                <p class="public-content">public</p>
            </OrgAuth>
        );

        var publicContent = cut.Find(".public-content");
        publicContent.MarkupMatches(@<p diff:ignore>public</p>);
    }

#endregion

#region Events

    [Test]
    public async Task Test_UnauthorizedToMod()
    {
        authContext?.SetClaims(
            new Claim("DatabaseId", unauthorizedId)
        );

        var cut = RenderModContent();
        Assert.Throws<Bunit.ElementNotFoundException>(() => cut.Find(".mod-content"));

        await mockOrgRepo.Object.AddModerator(testOrgId, unauthorizedId);

        mockOrgRepo.Raise(repo => repo.ModsUpdated += null,
            new OrgUpdatedEventArgs(
                Mock.Of<TestOrg>(
                    x => x.Moderators == new HashSet<string>() { modId, unauthorizedId } &&
                    x.Administrators == new HashSet<string>() { adminId }
                )
            )
        );

        var modContent = cut.Find(".mod-content");
        modContent.MarkupMatches(@<p diff:ignore>mod</p>);
    }

    [Test]
    public void Test_UnauthorizedToAdmin()
    {
        authContext?.SetClaims(
            new Claim("DatabaseId", unauthorizedId)
        );

        var cut = RenderAdminContent();
        Assert.Throws<Bunit.ElementNotFoundException>(() => cut.Find(".admin-content"));

        mockOrgRepo.Raise(repo => repo.AdminsUpdated += null,
            new OrgUpdatedEventArgs(
                Mock.Of<TestOrg>(x =>
                    x.Moderators == new HashSet<string>() { modId } &&
                    x.Administrators == new HashSet<string>() { adminId, unauthorizedId }
                )
            )
        );

        var adminContent = cut.Find(".admin-content");
        adminContent.MarkupMatches(@<p diff:ignore>admin</p>);
    }

    [Test]
    public void Test_ModToUnauthorized()
    {
        authContext?.SetClaims(
            new Claim("DatabaseId", modId)
        );

        var cut = RenderModContent();
        var modContent = cut.Find(".mod-content");
        modContent.MarkupMatches(@<p diff:ignore>mod</p>);

        mockOrgRepo.Raise(repo => repo.ModsUpdated += null,
            new OrgUpdatedEventArgs(
                Mock.Of<TestOrg>(x => 
                    x.Moderators == new HashSet<string>() &&
                    x.Administrators == new HashSet<string>() { adminId }
                )
            )
        );

        Assert.Throws<Bunit.ElementNotFoundException>(() => cut.Find(".mod-content"));
    }

    [Test]
    public void Test_ModToAdmin()
    {
        authContext?.SetClaims(
            new Claim("DatabaseId", modId)
        );

        var cut = RenderAdminContent();
        Assert.Throws<Bunit.ElementNotFoundException>(() => cut.Find(".admin-content"));

        mockOrgRepo.Raise(repo => repo.AdminsUpdated += null,
            new OrgUpdatedEventArgs(
                Mock.Of<TestOrg>(x =>
                    x.Moderators == new HashSet<string>() &&
                    x.Administrators == new HashSet<string>() { adminId, modId }
                )
            )
        );

        var adminContent = cut.Find(".admin-content");
        adminContent.MarkupMatches(@<p diff:ignore>admin</p>);
    }

    [Test]
    public void Test_AdminToMod()
    {
        authContext?.SetClaims(
            new Claim("DatabaseId", adminId)
        );

        var cut = RenderAdminContent();
        var adminContent = cut.Find(".admin-content");
        adminContent.MarkupMatches(@<p diff:ignore>admin</p>);

        mockOrgRepo.Raise(repo => repo.ModsUpdated += null,
            new OrgUpdatedEventArgs(
                Mock.Of<TestOrg>(x =>
                    x.Moderators == new HashSet<string>() { modId, adminId } &&
                    x.Administrators == new HashSet<string>()
                )
            )
        );

        Assert.Throws<Bunit.ElementNotFoundException>(() => cut.Find(".admin-content"));
    }

    [Test]
    public void Test_AdminToUnauthorized()
    {
        authContext?.SetClaims(
            new Claim("DatabaseId", adminId)
        );

        var cut = RenderAdminContent();
        var adminContent = cut.Find(".admin-content");
        adminContent.MarkupMatches(@<p diff:ignore>admin</p>);

        mockOrgRepo.Raise( repo => repo.AdminsUpdated += null,
            new OrgUpdatedEventArgs(
                Mock.Of<TestOrg>(x =>
                    x.Moderators == new HashSet<string>() { modId } &&
                    x.Administrators == new HashSet<string>()
                )
            )
        );

        Assert.Throws<Bunit.ElementNotFoundException>(() => cut.Find(".admin-content"));
    }

#endregion
}