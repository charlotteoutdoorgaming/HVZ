@using HVZ.Web.Shared.Org_Authorization
@using System.Security.Claims
@using NodaTime
@inherits Bunit.TestContext

@code
{
    Mock<IOrgRepo> mockOrgRepo = null!;
    
    private string orgId = "1";
    private string adminId = "2";
    private string ownerId = "2";
    private string modId = "3";
    private string unauthorizedId = "4";

    private Organization org = null!;

    TestAuthorizationContext? authContext;

    private Organization BuildOrg(string[] mods, string[] admins)
    {
        return new(
            id: orgId,
            name: "Test Org",
            ownerId: ownerId,
            moderators: new HashSet<string>(mods),
            administrators: new HashSet<string>(admins),
            games: new HashSet<Game>(),
            activeGameId: null,
            createdAt: Instant.MinValue,
            url: "testorg"
        );
    }

    [OneTimeSetUp]
    public void Setup()
    {
        org = BuildOrg(
            new string[] { modId },
            new string[] { adminId }
        );

        mockOrgRepo = new Mock<IOrgRepo>();
        
        mockOrgRepo.Setup(repo => repo.IsModOfOrg(orgId, adminId)).ReturnsAsync(false);
        mockOrgRepo.Setup(repo => repo.IsAdminOfOrg(orgId, adminId)).ReturnsAsync(true);

        mockOrgRepo.Setup(repo => repo.IsModOfOrg(orgId, modId)).ReturnsAsync(true);
        mockOrgRepo.Setup(repo => repo.IsAdminOfOrg(orgId, modId)).ReturnsAsync(false);

        mockOrgRepo.Setup(repo => repo.IsModOfOrg(orgId, unauthorizedId)).ReturnsAsync(false);
        mockOrgRepo.Setup(repo => repo.IsAdminOfOrg(orgId, unauthorizedId)).ReturnsAsync(false);

        mockOrgRepo.Setup(repo => repo.GetOrgById(orgId)).ReturnsAsync(org);

        {
            var modOrg = BuildOrg(
                new string[] { modId, unauthorizedId },
                new string[] { adminId }
            );
            mockOrgRepo.Setup(repo => repo.AddModerator(orgId, unauthorizedId))
                .ReturnsAsync(modOrg)
                .Raises(repo => repo.ModsUpdated += null, new OrgUpdatedEventArgs(modOrg));
        }

        {
            var modOrg = BuildOrg(
                new string[] { modId, adminId },
                new string[] {  }
            );
            mockOrgRepo.Setup(repo => repo.AddModerator(orgId, adminId))
                .ReturnsAsync(modOrg)
                .Raises(repo => repo.ModsUpdated += null, new OrgUpdatedEventArgs(modOrg));
        }

        {
            var modOrg = BuildOrg(
                new string[] { modId },
                new string[] { adminId, unauthorizedId }
            );
            mockOrgRepo.Setup(repo => repo.AddAdmin(orgId, unauthorizedId))
                .ReturnsAsync(modOrg)
                .Raises(repo => repo.AdminsUpdated += null, new OrgUpdatedEventArgs(modOrg));
        }
        
        {
            var modOrg = BuildOrg(
                new string[] {  },
                new string[] { adminId }
            );
            mockOrgRepo.Setup(repo => repo.RemoveModerator(orgId, modId))
                .ReturnsAsync(modOrg)
                .Raises(repo => repo.ModsUpdated += null, new OrgUpdatedEventArgs(modOrg));
        }

        {
            var modOrg = BuildOrg(
                new string[] {  },
                new string [] { adminId, modId }
            );
            mockOrgRepo.Setup(repo => repo.AddAdmin(orgId, modId))
                .ReturnsAsync(modOrg)
                .Raises(repo => repo.AdminsUpdated += null, new OrgUpdatedEventArgs(modOrg));
        }

        {
            var modOrg = BuildOrg(
                new string[] { modId },
                new string[] {  }
            );
            mockOrgRepo.Setup(repo => repo.RemoveAdmin(orgId, adminId))
                .ReturnsAsync(modOrg)
                .Raises(repo => repo.AdminsUpdated += null, new OrgUpdatedEventArgs(modOrg));
        }

        Services.AddSingleton<IOrgRepo>(mockOrgRepo.Object);
        authContext = this.AddTestAuthorization();
        
    }

    IRenderedFragment RenderAdminContent()
        => Render(
            @<OrgAuth OrgId="@orgId">
                <OrgAuthorizedAdmin>
                    <p class="admin-content">admin</p>
                </OrgAuthorizedAdmin>
            </OrgAuth>
        );

    IRenderedFragment RenderModContent()
        => Render(
            @<OrgAuth OrgId="@orgId">
                <OrgAuthorizedModerator>
                    <p class="mod-content">mod</p>
                </OrgAuthorizedModerator>
            </OrgAuth>
        );
    
    IRenderedFragment RenderNestedContent()
        => Render(
            @<OrgAuth OrgId="@orgId">
                <OrgAuthorizedModerator>
                    <OrgAuthorizedAdmin>
                        <p class="admin-content"></p>
                    </OrgAuthorizedAdmin>
                </OrgAuthorizedModerator>
            </OrgAuth>
        );

#region Permissions

    [Test]
    public void Test_AdminHasAdminPermissions()
    {
        authContext?.SetClaims(
            new Claim("DatabaseId", adminId)
        );
        
        IRenderedComponent<OrgAuth> cut = RenderComponent<OrgAuth>(parameter => parameter
            .Add(p => p.OrgId, orgId));
        OrgAuth auth = cut.Instance;

        Assert.That(auth.IsAdmin, Is.True);
    }

    [Test]
    public void Test_AdminHasModPermissions()
    {
        authContext?.SetClaims(
            new Claim("DatabaseId", adminId)
        );

        IRenderedComponent<OrgAuth> cut = RenderComponent<OrgAuth>(parameter => parameter
            .Add(p => p.OrgId, orgId));
        OrgAuth auth = cut.Instance;

        Assert.That(auth.IsMod, Is.True);
    }

    [Test]
    public void Test_ModDoesNotHaveAdminPermissions()
    {
        authContext?.SetClaims(
            new Claim("DatabaseId", modId)
        );

        IRenderedComponent<OrgAuth> cut = RenderComponent<OrgAuth>(parameter => parameter
            .Add(p => p.OrgId, orgId));
        OrgAuth auth = cut.Instance;

        Assert.That(auth.IsAdmin, Is.False);
    }

    [Test]
    public void Test_ModHasAdminPermissions()
    {
        authContext?.SetClaims(
            new Claim("DatabaseId", modId)
        );

        IRenderedComponent<OrgAuth> cut = RenderComponent<OrgAuth>(parameter => parameter
            .Add(p => p.OrgId, orgId));
        OrgAuth auth = cut.Instance;

        Assert.That(auth.IsMod, Is.True);
    }

    [Test]
    public void Test_UnauthorizedDoesNotHaveAdminPermissions()
    {
        authContext?.SetClaims(
            new Claim("DatabaseId", unauthorizedId)
        );

        IRenderedComponent<OrgAuth> cut = RenderComponent<OrgAuth>(parameter => parameter
            .Add(p => p.OrgId, orgId));
        OrgAuth auth = cut.Instance;

        Assert.That(auth.IsAdmin, Is.False);
    }

    [Test]
    public void Test_UnauthorizedDoesNotHaveModPermissions()
    {
        authContext?.SetClaims(
            new Claim("DatabaseId", unauthorizedId)
        );

        IRenderedComponent<OrgAuth> cut = RenderComponent<OrgAuth>(
            parameter => parameter
            .Add(p => p.OrgId, orgId));
        OrgAuth auth = cut.Instance;

        Assert.That(auth.IsMod, Is.False);
    }

    [Test]
    public void Test_OwnerIdValue()
    {
        IRenderedComponent<OrgAuth> cut = RenderComponent<OrgAuth>(
            parameter => parameter
            .Add(p => p.OrgId, orgId));
        OrgAuth auth = cut.Instance;

        Assert.That(auth.OwnerId == ownerId, Is.True);
    }

    [Test]
    public void Test_OrgValue()
    {
        IRenderedComponent<OrgAuth> cut = RenderComponent<OrgAuth>(
            parameter => parameter
            .Add(p => p.OrgId, orgId));
        OrgAuth auth = cut.Instance;

        Assert.That(auth.Org == org, Is.True);
    }
#endregion

#region Semantic HTML

    [Test]
    public void Test_AdminSeesAdminConent()
    {
        authContext?.SetClaims(
            new Claim("DatabaseId", adminId)
        );

        var cut = RenderAdminContent();

        var adminContent = cut.Find(".admin-content");
        adminContent.MarkupMatches(@<p diff:ignore>admin</p>);
    }

    [Test]
    public void Test_AdminSeesModContent()
    {
        authContext?.SetClaims(
            new Claim("DatabaseId", adminId)
        );

        var cut = RenderModContent();

        var modContent = cut.Find(".mod-content");
        modContent.MarkupMatches(@<p diff:ignore>mod</p>);
    }

    [Test]
    public void Test_AdminSeesPublicContent()
    {
        authContext?.SetClaims(
            new Claim("DatabaseId", adminId)
        );

        var cut = Render(
            @<OrgAuth OrgId="@orgId">
                <p class="public-content">public</p>
            </OrgAuth>
        );

        var publicContent = cut.Find(".public-content");
        publicContent.MarkupMatches(@<p diff:ignore>public</p>);
    }

    [Test]
    public void Test_AdminSeesNestedContent()
    {
        authContext?.SetClaims(
            new Claim("DatabaseId", adminId)
        );

        var cut = RenderNestedContent();

        var adminContent = cut.Find(".admin-content");
        adminContent.MarkupMatches(@<p diff:ignore>admin</p>);
    }

    [Test]
    public void Test_ModDoesNotSeeAdminContent()
    {
        authContext?.SetClaims(
            new Claim("DatabaseId", modId)
        );

        var cut = RenderAdminContent();

        Assert.Throws<Bunit.ElementNotFoundException>(() => cut.Find(".admin-content"));
    }

    [Test]
    public void Test_ModSeesModContent()
    {
        authContext?.SetClaims(
            new Claim("DatabaseId", modId)
        );

        var cut = RenderModContent();

        @* Verify that the <p> eleent is visible *@
        var modContent = cut.Find(".mod-content");
        modContent.MarkupMatches(@<p diff:ignore>mod</p>);
    }

    [Test]
    public void Test_ModSeesPublicContent()
    {
        authContext?.SetClaims(
            new Claim("DatabaseId", modId)
        );

        var cut = Render(
            @<OrgAuth OrgId="@orgId">
                <p class="public-content">public</p>
            </OrgAuth>
        );

        var publicContent = cut.Find(".public-content");
        publicContent.MarkupMatches(@<p diff:ignore>public</p>);
    }

    [Test]
    public void Test_ModDoesNotSeeNestedContent()
    {
        authContext?.SetClaims(
            new Claim("DatabaseId", modId)
        );

        var cut = RenderNestedContent();

        Assert.Throws<Bunit.ElementNotFoundException>(() => cut.Find(".admin-content"));
    }

    [Test]
    public void Test_UnauthorizedDoesNotSeeAdminContent()
    {
        authContext?.SetClaims(
            new Claim("DatabaseId", unauthorizedId)
        );

        var cut = RenderAdminContent();

        Assert.Throws<Bunit.ElementNotFoundException>(() => cut.Find(".admin-content"));
    }

    [Test]
    public void Test_UnauthorizedDoesNotSeeModContent()
    {
        authContext?.SetClaims(
            new Claim("DatabaseId", unauthorizedId)
        );
        
        var cut = RenderModContent();

        Assert.Throws<Bunit.ElementNotFoundException>(() => cut.Find(".mod-content"));
    }

    [Test]
    public void Test_UnauthorizedSeesPublicContent()
    {
        authContext?.SetClaims(
            new Claim("DatabaseId", unauthorizedId)
        );

        var cut = Render(
            @<OrgAuth OrgId="@orgId">
                <p class="public-content">public</p>
            </OrgAuth>
        );

        var publicContent = cut.Find(".public-content");
        publicContent.MarkupMatches(@<p diff:ignore>public</p>);
    }

#endregion

#region Events

    [Test]
    public async Task Test_UnauthorizedToMod()
    {
        authContext?.SetClaims(
            new Claim("DatabaseId", unauthorizedId)
        );

        var cut = RenderModContent();
        Assert.Throws<Bunit.ElementNotFoundException>(() => cut.Find(".mod-content"));

        await mockOrgRepo.Object.AddModerator(orgId, unauthorizedId);

        mockOrgRepo.Raise(repo => repo.ModsUpdated += null,
            new OrgUpdatedEventArgs(BuildOrg(
                new string[] { modId, unauthorizedId },
                new string[] { adminId }
            )));

        var modContent = cut.Find(".mod-content");
        modContent.MarkupMatches(@<p diff:ignore>mod</p>);
    }

    [Test]
    public async Task Test_UnauthorizedToAdmin()
    {
        authContext?.SetClaims(
            new Claim("DatabaseId", unauthorizedId)
        );

        var cut = RenderAdminContent();
        Assert.Throws<Bunit.ElementNotFoundException>(() => cut.Find(".admin-content"));

        await mockOrgRepo.Object.AddAdmin(orgId, unauthorizedId);

        var adminContent = cut.Find(".admin-content");
        adminContent.MarkupMatches(@<p diff:ignore>admin</p>);
    }

    [Test]
    public async Task Test_ModToUnauthorized()
    {
        authContext?.SetClaims(
            new Claim("DatabaseId", modId)
        );

        var cut = RenderModContent();
        var modContent = cut.Find(".mod-content");
        modContent.MarkupMatches(@<p diff:ignore>mod</p>);

        await mockOrgRepo.Object.RemoveModerator(orgId, modId);

        Assert.Throws<Bunit.ElementNotFoundException>(() => cut.Find(".mod-content"));
    }

    [Test]
    public async Task Test_ModToAdmin()
    {
        authContext?.SetClaims(
            new Claim("DatabaseId", modId)
        );

        var cut = RenderAdminContent();
        Assert.Throws<Bunit.ElementNotFoundException>(() => cut.Find(".admin-content"));

        await mockOrgRepo.Object.AddAdmin(orgId, modId);

        var adminContent = cut.Find(".admin-content");
        adminContent.MarkupMatches(@<p diff:ignore>admin</p>);
    }

    [Test]
    public async Task Test_AdminToMod()
    {
        authContext?.SetClaims(
            new Claim("DatabaseId", adminId)
        );

        var cut = RenderAdminContent();
        var adminContent = cut.Find(".admin-content");
        adminContent.MarkupMatches(@<p diff:ignore>admin</p>);

        await mockOrgRepo.Object.AddModerator(orgId, adminId);

        Assert.Throws<Bunit.ElementNotFoundException>(() => cut.Find(".admin-content"));
    }

    [Test]
    public async Task Test_AdminToUnauthorized()
    {
        authContext?.SetClaims(
            new Claim("DatabaseId", adminId)
        );

        var cut = RenderAdminContent();
        var adminContent = cut.Find(".admin-content");
        adminContent.MarkupMatches(@<p diff:ignore>admin</p>);

        await mockOrgRepo.Object.RemoveAdmin(orgId, adminId);

        Assert.Throws<Bunit.ElementNotFoundException>(() => cut.Find(".admin-content"));
    }

#endregion
}