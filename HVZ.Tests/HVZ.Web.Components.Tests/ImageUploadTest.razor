@inherits Bunit.TestContext

@code
{
    readonly Mock<ImageService> mockImageService = new();
    readonly Mock<IUserRepo> mockUserRepo = new();
    readonly Mock<IOrgRepo> mockOrgRepo = new();

    readonly string orgId = "0";
    readonly string userId = "1";

    byte[] imageData = null!;
    string imageDataBase64 = null!;

    [OneTimeSetUp]
    public void Setup()
    {
        using (var fs = new FileStream("../../../resources/0.png", FileMode.Open))
        {
            using (var ms = new MemoryStream())
            {
                fs.CopyTo(ms);
                imageData = ms.ToArray();
            }
        }

        imageDataBase64 = Convert.ToBase64String(imageData);

        @* Services *@
        mockImageService.Setup(service => service.HasUploadedOrgImage(orgId)).Returns(true);
        mockImageService.Setup(service => service.HasUploadedUserImage(userId)).Returns(true);

        Services.AddSingleton<ImageService>(mockImageService.Object);
        Services.AddSingleton<IUserRepo>(mockUserRepo.Object);
        Services.AddSingleton<IOrgRepo>(mockOrgRepo.Object);
    }

    [Test]
    public void Test_CurrentThumnailPreviewForUser()
    {
        IRenderedFragment cut = Render(@<ImageUploader UserId="@userId"/>);

        Assert.DoesNotThrow(
            () => cut.FindComponent<Thumbnail>()
            );
    }

    [Test]
    public void Test_CurrentThumbnailPreviewForOrg()
    {
        IRenderedFragment cut = Render(@<ImageUploader OrgId="@orgId"/>);

        Assert.DoesNotThrow(
            () => cut.FindComponent<Thumbnail>()
            );
    }

    [TestCase(ImageService.ImageSize.SMALL)]
    [TestCase(ImageService.ImageSize.MEDIUM)]
    [TestCase(ImageService.ImageSize.LARGE)]
    public void Test_UploadedImagePreviewForUser(ImageService.ImageSize size)
    {
        int sizeInt = (int)size;
        var testFile = InputFileContent.CreateFromBinary(imageData, "0.png", null, "image/png");

        IRenderedFragment cut = Render(
            @<ImageUploader UserId="@userId" Size="size"/>
            );

        string srcString = $"data:image/png;base64,{imageDataBase64}";

        IRenderedComponent<InputFile> input = cut.FindComponent<InputFile>();

        input.UploadFiles(testFile);

        IElement img = cut.Find("img");
        img.MarkupMatches(
            @<img src="@srcString" height="@sizeInt" width="@sizeInt">
            );

        IElement imgName = cut.Find("#img-name");
        imgName.MarkupMatches(
            @<p class="text-muted" id="img-name">
                <em>0.png</em>
            </p>
            );
    }

    [TestCase(ImageService.ImageSize.SMALL)]
    [TestCase(ImageService.ImageSize.MEDIUM)]
    [TestCase(ImageService.ImageSize.LARGE)]
    public void Test_UploadedImagePreviewForOrg(ImageService.ImageSize size)
    {
        int sizeInt = (int)size;
        var testFile = InputFileContent.CreateFromBinary(imageData, "0.png", null, "image/png");

        IRenderedFragment cut = Render(
            @<ImageUploader OrgId="@orgId" Size="size"/>
            );

        string srcString = $"data:image/png;base64,{imageDataBase64}";

        IRenderedComponent<InputFile> input = cut.FindComponent<InputFile>();

        input.UploadFiles(testFile);

        IElement img = cut.Find("img");
        img.MarkupMatches(
            @<img src="@srcString" height="@sizeInt" width="@sizeInt">
            );

        IElement imgName = cut.Find("#img-name");
        imgName.MarkupMatches(
            @<p class="text-muted" id="img-name">
                <em>0.png</em>
            </p>
            );
    }

    [Test]
    public void Test_ThrowErrorForNonImage()
    {
        var testFile = InputFileContent.CreateFromText("Not an image", "text.txt", null, "text/txt");

        IRenderedFragment cut = Render(
            @<ImageUploader UserId="@userId"/>
            );

        IRenderedComponent<InputFile> input = cut.FindComponent<InputFile>();

        input.UploadFiles(testFile);

        IElement errorText = cut.Find("#error-text");
        errorText.MarkupMatches(
            @<p class="text-danger" id="error-text">File must be an image</p>
            );

        Assert.DoesNotThrow(
            () => cut.FindComponent<Thumbnail>()
            );

    }

    [Test]
    public void Test_FileUploadSize()
    {
        var testFile = InputFileContent.CreateFromBinary(imageData, "0.png", null, "image/png");

        IRenderedFragment cut = Render(
            @<ImageUploader UserId="@userId" MaxImageSizeBytes="10"/>// Intentionally lower number of bytes to make testing easier
            );

        IRenderedComponent<InputFile> input = cut.FindComponent<InputFile>();

        input.UploadFiles(testFile);

        IElement errorText = cut.Find("#error-text");
        errorText.MarkupMatches(
            @<p class="text-danger" id="error-text">Image too large! Max image size is 4MB</p>
            );

        Assert.DoesNotThrow(
            () => cut.FindComponent<Thumbnail>()
            );

    }
}